@model QBA.Qutilize.WebApp.Models.ProjectModel
@{
    /**/

    ViewBag.Title = "Manage Project";
    Layout = "~/Views/Shared/_ViewStartPrivate.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Manage Projects</title>
</head>
<body>
    @{
        var strMSGforSave = string.Empty;
        string strStyle = string.Empty;
        string strErrorStyle = string.Empty;

        var strMsgforErr = string.Empty;
        var strmsgStyle = string.Empty;

        var errSts = TempData["ErrMsg"];

        var ErrStatus = TempData["ErrStatus"];
        //if (ErrStatus != null)
        //{
        //    strMSGforSave = ErrStatus.ToString();
        //}
        //if (strMSGforSave != "")
        //{
        //    strStyle = "display:block";
        //}
        //else
        //{
        //    strStyle = "display:none";
        //}
        strStyle = "display:none";
        strErrorStyle = "display:none";
        if (ErrStatus != null && Convert.ToBoolean(ErrStatus) == false)
        {
            strMSGforSave = errSts.ToString();
            strStyle = "display:block";
            strErrorStyle = "display:none";
        }
        else if(ErrStatus != null && Convert.ToBoolean(ErrStatus) == true)
        {
            strMSGforSave= errSts.ToString();
            strStyle = "display:none";
            strErrorStyle = "display:block";
        }
        //if (strMSGforSave != "")
        //{
        //    strStyle = "display:block";
        //}
        //else
        //{
        //    strStyle = "display:none";
        //}


    }

    <div class="form-horizontal col-md-12">
        <div class="alert alert-success alert-dismissible" role="alert" style="@strStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            Data Saved Successfully!!!
        </div>
    </div>

    <div class="form-horizontal col-md-12">
        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg1" name="ErrorMsg1" style="@strErrorStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <span id="errormsg1">@strMSGforSave</span>
        </div>
    </div>
    <h4>Manage Project</h4>
    <br />
    <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">
        <table class="table table-striped table-bordered myTable" id="tblGridListViewPost">
            <thead id="tblHeadListViewPost">
                <tr>
                    <th class="text-center tblHeaderColor sorting">ID</th>
                    <th class="text-center tblHeaderColor sorting">Project Name</th>
                    <th class="text-center tblHeaderColor sorting">Project Code</th>
                    <th class="text-center tblHeaderColor sorting">Description</th>
                    <th class="text-center tblHeaderColor sorting">Department</th>
                    <th class="text-center tblHeaderColor sorting">Manager Name</th>
                    <th class="text-center tblHeaderColor sorting">Client Name</th>
                    <th class="text-center tblHeaderColor sorting">Organisation</th>
                    <th class="text-center tblHeaderColor sorting">Status</th>
                    <th class="text-center tblHeaderColor sorting">Edit</th>
                    <th class="text-center tblHeaderColor sorting">Add Task</th>
                </tr>
            </thead>
            <tbody>
                @Html.Action("LoadProjectData", "Admin")
            </tbody>
        </table>
        @*<input type="hidden" id="UserIdsInString" name="UserIdsInString" />*@
    </div>
    <div class="col-md-12"><br /></div>
    <div class="form-horizontal col-md-12">
        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg" name="ErrorMsg" style="display:none">

            <span id="errormsg"></span>
        </div>
    </div>

    <div id="myModalForTask" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <input type="hidden" id="SelectedProjectId" />
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color:#626262;"><span id="projectNameHeader"></span> Task List</h4>
                </div>

                <div class="modal-body">
                    <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">
                        <input type="hidden" id="UserIdsInString" name="UserIdsInString" />

                        <table class="table table-striped table-bordered myTable" id="tblTasklist">
                            <thead id="tblHeadListViewPost">
                                <tr>
                                    <th class="text-center tblHeaderColor sorting">ID</th>
                                    <th class="text-center tblHeaderColor sorting">Task Name</th>
                                    <th class="text-center tblHeaderColor sorting">Parent task Name</th>
                                    <th class="text-center tblHeaderColor sorting">Project Name</th>
                                    <th class="text-center tblHeaderColor sorting">Start Date</th>
                                    <th class="text-center tblHeaderColor sorting">End Date</th>
                                    <th class="text-center tblHeaderColor sorting">Actual Start Date</th>
                                    <th class="text-center tblHeaderColor sorting">Actual End Date</th>
                                    <th class="text-center tblHeaderColor sorting">Task Status</th>
                                    <th class="text-center tblHeaderColor sorting">Status</th>
                                    <th class="text-center tblHeaderColor sorting">Edit</th>
                                </tr>
                            </thead>
                            <tbody id="tBosyTaskList"></tbody>
                        </table>
                    </div>
                    <div class="col-md-12"><br /></div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-success alert-dismissible" role="alert" id="divTaskSaveSuccess" style="display:none;">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            Data Saved Successfully!!!
                        </div>
                    </div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsgTask" name="ErrorMsgTask" style="display:none">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <span id="errormsgforTask"></span>
                        </div>
                    </div>
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <h5>Project Task Details</h5>

                        <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:5px">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.ProjectTask.TaskId)

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskCode, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.Label("Parent Task", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="ddlParentTask" class="form-control"><option value="">Select Task</option></select>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskStartDateDisplay, htmlAttributes: new { @class = "control-label col-md-2 " })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskStartDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskStartDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskEndDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskEndDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskEndDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Assigned to", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-7" id="divUserDDL">
                                    @Html.HiddenFor(model => model.ProjectTask.UserIdsTaskAssigned)

                                    <select id="ddlUsersAssigned" class="form-control" multiple="multiple"><option value="">Select User</option></select>
                                </div>
                                <div class="col-md-1" id="divAddUserToAssignProject">
                                    <input type="button" value="&#xe081;" class="btn btn-primary glyphicon " id="btnAddUser" title="Add User" />
                                </div>

                                @*<div class="col-md-2"></div>*@
                            </div>
                            <div class="col-md-12"><br /></div>
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <div id="divUserList" style="display:none;" class="col-md-10">

                                    <form class="navbar-form" role="search">
                                        <div class="input-group add-on">
                                            <input class="form-control" placeholder="Search" name="srch-term" id="srch-term" type="text">
                                        </div>
                                    </form>

                                    <div id="popupUserBody">

                                    </div>

                                    <div class="modal-footer">
                                        <input type="button" id="btnSaveUserProjectMapping" class="btn btn-default" value="Submit">
                                        <button type="button" id="btnCloseUserList" class="btn btn-default">Close</button>
                                    </div>
                                </div>

                            </div>


                            <div class="form-group">
                                @Html.Label("Percentage Complete", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="ddlPercentage" class="form-control"><option value="">Select percentage</option></select>
                                </div>
                            </div>



                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.ActualTaskStartDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.ActualTaskStartDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.ActualTaskStartDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.ActualTaskEndDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.ActualTaskEndDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.ActualTaskEndDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="ddlTaskStatus" class="form-control"><option value="0">Select status</option></select>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.EditorFor(model => model.ProjectTask.IsActive)
                                        @Html.ValidationMessageFor(model => model.ProjectTask.IsActive, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                    }

                </div>

                <div class="modal-footer">
                    <input type="button" id="btnProjectTaskSave" class="btn btn-default" value="Submit">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>

    </div>


    <div id="myModalForUsers" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color:#626262;">Select Users</h4>
                </div>

                <div class="modal-body">
                    <form class="navbar-form" role="search">
                        <div class="input-group add-on">
                            <input class="form-control" placeholder="Search" name="srch-term" id="srch-term" type="text">
                        </div>
                    </form>

                    @*<div id="popupUserBody">

                        </div>*@
                </div>


                <div class="modal-footer">
                    <input type="button" id="btnSaveUserProjectMapping" class="btn btn-default" value="Submit">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>
    </div>

    @*@Html.HiddenFor(model => model.DepartmentID)*@
    @using (Html.BeginForm("ManageProject", "Admin", FormMethod.Post, new { onsubmit = "return checkUserForm()" }))
    {
        @Html.AntiForgeryToken()
        <h4>Project Details</h4>
        <hr />
        <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px" id="divForm">


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ProjectID)

            <div class="form-group">
                @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ProjectCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProjectCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProjectCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DepartmentList, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.DepartmentList, new SelectList(Model.DepartmentList, "DepartmentID", "DisplayTextForCumboWithOrgName"), "Select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.DepartmentID)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserList, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.UserList, new SelectList(Model.UserList, "ID", "OrgName_UserNameForCombo"), "Select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.PMUserID)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ClientList, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ClientList, new SelectList(Model.ClientList, "ClientID", "OrgName_ClientNameForCombo"), "Select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.ClientD)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MaxProjectTimeInHours, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MaxProjectTimeInHours, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MaxProjectTimeInHours, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }



    <script type="text/javascript">


        $("#tblGridListViewPost").dataTable();
        $("#ProjectTask_TaskStartDateDisplay").datepicker({

            autoclose: true

        })


        $("#ProjectTask_ActualTaskStartDateDisplay").datepicker({

            autoclose: true

        })
        $("#ProjectTask_TaskEndDateDisplay").datepicker({

            autoclose: true

        })

        $("#ProjectTask_ActualTaskEndDateDisplay").datepicker({

            autoclose: true

        })
        var DeptId = $('#DepartmentID').val();
        if (DeptId > 0) {
            $('#DepartmentList').val(DeptId);
        }

        var managerId = $('#PMUserID').val();
        if (managerId > 0) {
            $('#UserList').val(managerId);
        }
        var clientID = $('#ClientD').val();
        if (clientID > 0) {
            $('#ClientList').val(clientID);
        }
        function checkUserForm() {

            var ProjectName = document.getElementById("ProjectName").value;
            var projectCode = document.getElementById("ProjectCode").value;
            var DepartmentId = $("#DepartmentList").val();
            var MaxProjectTimeInHours = $('#MaxProjectTimeInHours').val();
            if (ProjectName == "") {
                document.getElementById("errormsg").innerHTML = "Please Provide Project Name";
                document.getElementById("ErrorMsg").style.display = 'block';

                return false;
            }
            if (projectCode == "") {
                document.getElementById("errormsg").innerHTML = "Please Provide Project code";
                document.getElementById("ErrorMsg").style.display = 'block';

                return false;
            }
            if (DepartmentId <= 0) {
                document.getElementById("errormsg").innerHTML = "Please select a department";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }
            if ($.isNumeric(MaxProjectTimeInHours) == false) {
                document.getElementById("errormsg").innerHTML = "Please enter only numeric value for maximum time for project.";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }
            return true;
        }

        $("#DepartmentList").change(function () {

            var departmentId = $("#DepartmentList").val();

            $('#DepartmentID').val(departmentId);

        });
        $("#UserList").change(function () {
            var managerID = $("#UserList").val();
            $('#PMUserID').val(managerID);

        });

        $("#ClientList").change(function () {
            //alert($("#DepartmentList").val());
            var clientID = $("#ClientList").val();

            $('#ClientD').val(clientID);

        });
        function ShowTaskPopup(projectId) {

            //alert(projectname);
            $('#SelectedProjectId').val(projectId);
            $("#ddlUsersAssigned").multiselect('destroy');

            $.ajax({
                url: '@Url.Action("ManageProjectTask", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ "ProjectId": projectId }),
                    success: function (response) {
                        //console.log(response);
                        var obj = JSON.parse(response);

                        if (obj.PercentageComplete.length > 0) {
                            var percentageArray = obj.PercentageComplete;
                            $("#ddlPercentage").html('');
                            for (var i = 0; i < percentageArray.length; i++) {

                                $("#ddlPercentage").append($("<option></option>").val(percentageArray[i]).html(percentageArray[i]));
                            }
                        }
                        $("#ddlTaskStatus").html('')
                        //$("#ddlTaskStatus").append($("<option></option>").val(0).html('Select status'));
                        if (obj.StatusList.length > 0) {
                            var statusList = obj.StatusList;
                            for (var i = 0; i < statusList.length; i++) {

                                $("#ddlTaskStatus").append($("<option></option>").val(statusList[i].StatusID).html(statusList[i].StatusName));
                            }
                        }

                        $("#ddlParentTask").html('')

                        if ($.fn.DataTable.isDataTable('#tblTasklist')) {
                            $('#tblTasklist').DataTable().destroy();
                        }

                        $('#tblTasklist tbody').html('');


                        $("#ddlParentTask").append($("<option></option>").val(0).html('Select Task'));
                        if (obj.TaskList.length > 0) {
                            $('#ddlParentTask').attr("disabled", false);
                            var taskList = obj.TaskList;

                            for (var i = 0; i < taskList.length; i++) {
                                var taskActualStartValue = (taskList[i].ActualTaskStartDate == null) ? "" : formatDateInMM_DD_YYYY((taskList[i].ActualTaskStartDate));
                                var taskActualEndValue = (taskList[i].ActualTaskEndDate == null) ? "" : formatDateInMM_DD_YYYY((taskList[i].ActualTaskEndDate));
                                var activeStatus = (taskList[i].IsActive == true) ? 'Active' : 'In Active';

                                var userListHTML = "<tr><td>" + taskList[i].TaskId + "</td> <td>" + taskList[i].TaskName + "</td> <td>" + taskList[i].ParentTaskName + "</td> <td>" + taskList[i].ProjectName + "</td> <td>" +
                                    formatDateInMM_DD_YYYY(new Date(taskList[i].TaskStartDate))
                                    + "</td> <td>" + formatDateInMM_DD_YYYY(new Date(taskList[i].TaskEndDate)) + "</td><td>" + taskActualStartValue + "</td><td>" + taskActualEndValue +
                                    "</td> <td>" + taskList[i].TaskStatusName + "</td><td>" + activeStatus +
                                    "</td><td><a href='javascript:void(0);' id='projectTaskEdit' onclick='EditProjectTask(" + taskList[i].TaskId + ")'>Edit</a></td>"
                                $('#tblTasklist tbody').append(userListHTML);

                                $("#ddlParentTask").append($("<option></option>").val(taskList[i].TaskId).html(taskList[i].TaskName));
                            }
                        }
                        else {
                            $('#tblTasklist tbody').html('');
                            $('#ddlParentTask').attr("disabled", "disabled");
                        }

                        $("#ddlUsersAssigned").html('')

                        if (obj.UserList.length > 0) {

                            $('#divAddUserToAssignProject').css('display', 'none');
                            $('#divUserDDL').removeClass('col-md-7');
                            $('#divUserDDL').addClass('col-md-10') ;
                            var UserList = obj.UserList;

                            for (var i = 0; i < UserList.length; i++) {

                                $("#ddlUsersAssigned").append($("<option></option>").val(UserList[i].ID).html(UserList[i].Name));
                            }


                            //$("#ddlUsersAssigned").multiselect('refresh');
                            $("#ddlUsersAssigned").multiselect({
                                enableCaseInsensitiveFiltering: true,
                                buttonWidth: 550,
                                enableFiltering: true
                               });

                        }
                        else {
                            $('#divUserDDL').removeClass('col-md-10');
                            $('#divUserDDL').addClass('col-md-7');
                            $('#divAddUserToAssignProject').css('display', 'block');

                            //$("#ddlUsersAssigned").multiselect('refresh');
                            $("#ddlUsersAssigned").multiselect({
                                enableCaseInsensitiveFiltering: true,
                                buttonWidth: 550,
                                enableFiltering: true
                            });

                        }

                        $('#tblTasklist').dataTable();

                        $('#myModalForTask').modal('show');
                    },
                    error: function (response) {
                        console.log(response);
                    }
            });



        }
        $('#ddlUsersAssigned').change(function () {

            var userIds = $("#ddlUsersAssigned option:selected").map(function () { return this.value }).get().join(",");


            $('#UserIdsInString').val(userIds);
            console.log(userIds);

        })
        $('#btnProjectTaskSave').click(function () {

            var taskID = $('#ProjectTask_TaskId').val();
            var projectID = $('#SelectedProjectId').val();
            var taskName = $('#ProjectTask_TaskName').val();
            var taskCode = $('#ProjectTask_TaskCode').val();
            var parentTaskId = $('#ddlParentTask').val();

            var startDate = $('#ProjectTask_TaskStartDateDisplay').val();
            var endDate = $('#ProjectTask_TaskEndDateDisplay').val();

            var actualStartDate =$('#ProjectTask_ActualTaskStartDateDisplay').val();
            var actualEndDate = $('#ProjectTask_ActualTaskEndDateDisplay').val();

            var completePercent = $('#ddlPercentage').val();
            var taskStatusId = $('#ddlTaskStatus').val();
            var IsActive = $('#ProjectTask_IsActive').is(':checked');

            var userIds = $('#UserIdsInString').val();

           var validationStatus= validateTaskSave()

            if (validationStatus != true)
                return false;


            var data = {
                "TaskId": taskID,
                "ProjectID": projectID,
                "TaskName": taskName,
                "TaskCode": taskCode,
                "ParentTaskId": parentTaskId,
                "TaskStartDateDisplay": startDate,
                "TaskEndDateDisplay": endDate,
                "ActualTaskStartDateDisplay": actualStartDate,
                "ActualTaskEndDateDisplay": actualEndDate,
                "CompletePercent": completePercent,
                "IsActive": IsActive,
                "TaskStatusID": taskStatusId,
                "UserIdsTaskAssigned": userIds
            };

            $.ajax({
                url: '@Url.Action("SaveProjectTask", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(data),
                success: function (response) {
                    if (response == "Success") {

                        $('#divTaskSaveSuccess').css('display', 'block');
                        response = null;
                        clearAllTaskControls();
                        ShowTaskPopup(projectID);
                    } else {

                        ShowTaskErrorMessage('Error occured.')
                        $('#divTaskSaveSuccess').css('display', 'none');

                    }

                    },
                error: function (response) {

                    ShowTaskErrorMessage('Error occured.')

                    }
            });

           // alert('task save');
        })

        $('#btnAddUser').click(function () {


            var projectID = $('#SelectedProjectId').val();

            $.ajax({
                url: '@Url.Action("GetAllUserOfOrganisationByProjectID", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    "projectID": projectID
                }),
                success: function (response) {
                    $('#popupUserBody').html('');
                    $('#popupUserBody').append(response);

                    $('#divUserList').css('display', 'block');




                   // $('#myModalForUsers').modal('show');
                },
                error: function (response) {
                    alert('error occured')
                    console.log(response);
                }
            });

        });


        function EditProjectTask(taskID) {

            var taskid = taskID;

            if ($("#ddlParentTask option").length <= 2) {
                $("#ddlParentTask option").attr("disabled", "disabled");
            } else {
                $("#ddlParentTask option").each(function (i) {

                    if ($(this).val() == taskID) {
                        $(this).attr("disabled", "disabled");
                    }
                    else {
                        $(this).attr("disabled", false);
                    }
                })
            }

            var position = $('#divForm').position();
            $("#myModalForTask").scrollTop(position.top);
             $.ajax({
                url: '@Url.Action("GetProjectTaskByID", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    "taskId": taskID
                }),
                 success: function (response) {
                    // console.log(response);
                    ///$("#ddlParentTask option[value='+taskID+']").remove();
                     var taskObj = JSON.parse(response);
                     $('#ProjectTask_TaskId').val(taskObj.TaskId)
                     $('#ProjectTask_TaskName').val(taskObj.TaskName);
                     $('#ProjectTask_TaskCode').val(taskObj.TaskCode);

                     $('#ddlParentTask').val(taskObj.ParentTaskId)

                     $('#ProjectTask_TaskStartDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.TaskStartDate));
                     $('#ProjectTask_TaskEndDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.TaskEndDate));

                     $('#ddlPercentage').val(taskObj.CompletePercent);


                     if (taskObj.ActualTaskStartDate != null) {
                         $('#ProjectTask_ActualTaskStartDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.ActualTaskStartDate));
                     }
                     else {
                         $('#ProjectTask_ActualTaskStartDateDisplay').val('');
                     }
                     if (taskObj.ActualTaskEndDate != null) {
                         $('#ProjectTask_ActualTaskEndDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.ActualTaskEndDate));
                     }
                     else {
                         $('#ProjectTask_ActualTaskEndDateDisplay').val('');
                     }
                     $('#ddlTaskStatus').val(taskObj.TaskStatusID);
                     $('#ProjectTask_IsActive').prop('checked', taskObj.IsActive);
                     $('#ProjectTask_UserIdsTaskAssigned').val(taskObj.UserIdsTaskAssigned);


                     $('#ddlUsersAssigned').multiselect('deselectAll', false);
                     $('#ddlUsersAssigned').multiselect('updateButtonText');

                     var userIds = taskObj.UserIdsTaskAssigned;
                     var selectedOptions = taskObj.UserIdsTaskAssigned.split(',');
                     for (i = 0; i < selectedOptions.length; i++) {

                         $('#ddlUsersAssigned').multiselect('select', [selectedOptions[i]]);
                     }

                     $('#UserIdsInString').val(userIds);

                     $('#ddlTaskStatus').val(taskObj.TaskStatusID);


                },
                error: function (response) {
                    alert('error occured')
                   // console.log(response);
                }
            });


        }

        //if ($('#ProjectTask_UserIdsTaskAssigned').val() != "") {

        //    var AllselectedOptions = $('#UserIdsTaskAssigned').val();
        //    var selectedOptions = AllselectedOptions.split(',');

        //    for (var i in selectedOptions) {
        //        var optionVal = selectedOptions[i];
        //        $("#ddlUsersAssigned").find("option[value=" + optionVal + "]").prop("selected", "selected");
        //    }
        //    $("#ddlUsersAssigned").multiselect('reload');
        //}

        function formatDateInMM_DD_YYYY(yourUnformattedDate) {
            var formattedDate = new Date(yourUnformattedDate);
            var day = formattedDate.getDate();
            var month = formattedDate.getMonth();
            month += 1;  // JavaScript months are 0-11
            var year = formattedDate.getFullYear();
            if (day < 10) {
                day = "0" + day;
            }
            if (month < 10) {
                month = "0" + month;
            }
           // return (day + "/" + month + "/" + year);
            return (month + "/" + day + "/" + year);

        }
        function clearAllTaskControls() {
            $('#ProjectTask_TaskId').val('');
            $('#ProjectTask_TaskName').val('');
            $('#ProjectTask_TaskCode').val('');
            $('#ProjectTask_TaskStartDateDisplay').val('');
            $('#ProjectTask_TaskEndDateDisplay').val('');
            $('#ProjectTask_ActualTaskStartDateDisplay').val('');
            $('#ProjectTask_ActualTaskEndDateDisplay').val('');
            $('#ddlUsersAssigned').val(0);
            $('#ddlUsersAssigned').multiselect('deselectAll', false);
            $('#ddlUsersAssigned').multiselect('updateButtonText');
            $('#ddlParentTask').val(0);
            $('#ddlPercentage').val(0);
            $('#ddlTaskStatus').val(0);
            $('#ProjectTask_IsActive').val(false);
            $('#ProjectTask_IsActive').prop("checked", false);
        }

        function validateTaskSave() {
            var projectID = $('#SelectedProjectId').val();
            var taskName = $('#ProjectTask_TaskName').val();
            var taskCode = $('#ProjectTask_TaskCode').val();
            var startDate = $('#ProjectTask_TaskStartDateDisplay').val();
            var endDate = $('#ProjectTask_TaskEndDateDisplay').val();

            var actualStartDate = $('#ProjectTask_ActualTaskStartDateDisplay').val();
            var actualEndDate = $('#ProjectTask_ActualTaskEndDateDisplay').val();

            var userIds = $('#UserIdsInString').val();
            var taskStatus = $('#ddlTaskStatus').val();
            if (taskName == "") {
                ShowTaskErrorMessage('Task name is required..')
                return false;
            }
            else {
                HideTaskErrorMessage();
            }
            if (taskCode == "") {
                ShowTaskErrorMessage('Task code is required..')
                return false;
            } else {
                HideTaskErrorMessage();
            }

            if (startDate == "") {
                ShowTaskErrorMessage('Start date is required..')
                return false;
            } else {

                if (!validateDate(startDate)) {
                    ShowTaskErrorMessage('Invalid start date..')
                    return false;
                }
                else {
                    HideTaskErrorMessage();
                }

            }
            if (endDate == "") {
                ShowTaskErrorMessage('End date is required..')
                return false;
            } else {

                if (!validateDate(endDate)) {
                    ShowTaskErrorMessage('Invalid end date..')
                    return false;
                }
                else {
                    //validation for lesser end date

                    //var splitstartDate = startDate.split('/');
                    //var startdateFormat = splitstartDate[0] + '/' + splitstartDate[1] + '/' + splitstartDate[2];
                    //var start = new Date(startdateFormat);


                    //var splitEndtDate = endDate.split('/');
                    //var enddateFormat = splitEndtDate[0] + '/' + splitEndtDate[1] + '/' + splitEndtDate[2];
                    //var end = new Date(enddateFormat);

                    var startmonthfield = startDate.split("/")[0]
                    var startdayfield = startDate.split("/")[1]
                    var startyearfield = startDate.split("/")[2]
                    var start = new Date(startyearfield, startmonthfield - 1, startdayfield)

                    var endmonthfield = endDate.split("/")[0]
                    var enddayfield = endDate.split("/")[1]
                    var endyearfield = endDate.split("/")[2]
                    var end = new Date(endyearfield, endmonthfield - 1, enddayfield)

                    if (start > end) {
                        ShowTaskErrorMessage('End time can not be less than start time..')
                        return false;
                    }
                    else {
                        HideTaskErrorMessage();
                    }

                }
            }

            if (actualStartDate != "") {
                if (!validateDate(actualStartDate)) {
                    ShowTaskErrorMessage('Invalid Actual start date..')
                    return false;
                }
                else {
                    HideTaskErrorMessage();
                }

            }

            if (actualEndDate != "") {
                if (!validateDate(actualEndDate)) {
                    ShowTaskErrorMessage('Invalid Actual end date..')
                    return false;
                }
                else {

                    //var splitStartDate = startDate.split('/');
                    //var startdateFormat = splitStartDate[1] + '/' + splitStartDate[0] + '/' + splitStartDate[2];
                    //var start = new Date(startdateFormat);

                    //var splitActualStartDate = actualStartDate.split('/');
                    //var ActualstartdateFormat = splitActualStartDate[1] + '/' + splitActualStartDate[0] + '/' + splitActualStartDate[2];
                    ////var start = new Date(startdateFormat);
                    //var actualStart = new Date(ActualstartdateFormat);

                    //var splitActualEndDate = actualEndDate.split('/');
                    //var ActualEnddateFormat = splitActualEndDate[1] + '/' + splitActualEndDate[0] + '/' + splitActualEndDate[2];
                    //var actualEnd = new Date(ActualEnddateFormat);

                    var startmonthfield = startDate.split("/")[0]
                    var startdayfield = startDate.split("/")[1]
                    var startyearfield = startDate.split("/")[2]
                    var start = new Date(startyearfield, startmonthfield - 1, startdayfield)

                    var actualStartmonthfield = actualStartDate.split("/")[0]
                    var actualStartdayfield = actualStartDate.split("/")[1]
                    var actualStartyearfield = actualStartDate.split("/")[2]
                    var actualStart = new Date(actualStartyearfield, actualStartmonthfield - 1, actualStartdayfield)

                    var actualEndmonthfield = actualEndDate.split("/")[0]
                    var actualEnddayfield = actualEndDate.split("/")[1]
                    var actualEndyearfield = actualEndDate.split("/")[2]
                    var actualEnd = new Date(actualEndyearfield, actualEndmonthfield - 1, actualEnddayfield)

                    if (actualStart > actualEnd || start > actualEnd) {
                        ShowTaskErrorMessage('Actual end time can not be less than actual start time/Start time..')
                        return false;
                    }
                    else {
                        HideTaskErrorMessage();
                    }

                }

            }


            if (userIds == "") {
                ShowTaskErrorMessage('Please select a user to assign task')
                return false;
            } else {
                HideTaskErrorMessage();
            }
            if (taskStatus == 0) {
                ShowTaskErrorMessage('Please select task status')
                return false;
            } else {
                HideTaskErrorMessage();
            }
            return true;
        }


        function ShowTaskErrorMessage( message) {
            $('#errormsgforTask').append(message);
            $('#ErrorMsgTask').css('display', 'block');
        }


        function HideTaskErrorMessage() {
            $('#errormsgforTask').text('');
            $('#ErrorMsgTask').css('display', 'none');
        }

        $('#btnSaveUserProjectMapping').click(function () {

            var Itemlist = [];
            var moduleid = [];
            var moduleids = [];
            var userName = [];
            var userNames = [];
            var userList = [];
            var projectID = document.getElementById("SelectedProjectId").value;
            $("#ddlUsersAssigned").multiselect('destroy');

            var lastpushedModuleid = 0;

            $('#divUserList input:checked').each(function () {

                if ($(this).attr("name") == "modules") {
                    moduleid = $(this).val();
                    userName = $(this).next('span').text();

                }

                moduleids.push(moduleid);
                userNames.push(userName);
            });


            for (var i = 0; i < moduleids.length; i++) {

                if (lastpushedModuleid != moduleids[i]) {
                    Item = { ProjectId: projectID, UserId: moduleids[i] }
                    Itemlist.push(Item);
                }
            }

            for (var i = 0; i < moduleids.length; i++) {

                if (lastpushedModuleid != moduleids[i]) {
                    Item = { UserName: userNames[i], UserId: moduleids[i] }
                    userList.push(Item);
                }
            }

            lastpushedModuleid = moduleids[i];


             $.ajax({
                url: '@Url.Action("SaveProjectUserMapping", "Admin")',
                dataType: "json",
                 data: JSON.stringify({ itemlist: Itemlist }),
                type: "POST",
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    if (result == "success") {


                        $('#divUserList').css('display', 'none');
                        $("#ddlUsersAssigned").html('');
                        var userIds=""
                        for (var i = 0; i < userList.length; i++) {
                            userIds += userList[i].UserId + ",";
                            $("#ddlUsersAssigned").append($("<option></option>").val(userList[i].UserId).html(userList[i].UserName));
                        }
                        userIds = userIds.substr(0, userIds.length - 1);
                        $("#ddlUsersAssigned").multiselect({
                            enableCaseInsensitiveFiltering: true,
                            buttonWidth: 550,
                            enableFiltering: true
                        });


                        var selectedOptions = userIds.split(',');
                        for (i = 0; i < selectedOptions.length; i++) {
                            $('#ddlUsersAssigned').multiselect('select', [selectedOptions[i]]);
                        }

                        $('#UserIdsInString').val(userIds);

                        $('#divAddUserToAssignProject').css('display', 'none');
                        $('#divUserDDL').removeClass('col-md-7');
                        $('#divUserDDL').addClass('col-md-10');


                    } else {
                        alert("error");
                    }
                },
                error: function (xhr) {
                    console.log();
                }
            });
        });

        $.extend($.expr[":"], {
            "containsIN": function (elem, i, match, array) {
                return (elem.textContent || elem.innerText || "").toLowerCase().indexOf((match[3] || "").toLowerCase()) >= 0;
            }


        });


        $('#srch-term').keyup(function () {
            //alert('test');

            $("#divUserList div").css("text-decoration", "none");
            $("#divUserList div").css("background", "white");
            $("#divUserList span").css("background", "white");
            $("#divUserList span").css("text-decoration", "none");
            $("#divUserList div").css("color", "black");

            var searchFilter = $(this).val();

            if (searchFilter == "") {

                $("#divUserList div").css("text-decoration", "none");
                $("#divUserList div").css("background", "white");
                $("#divUserList span").css("background", "white");
                $("#divUserList span").css("text-decoration", "none");
                $("#divUserList div").css("color", "black");
            }
            else {

                //$("#divUserList div:containsIN(" + searchFilter + ")").css("text-decoration", "underline");
                //$("#divUserList div:containsIN(" + searchFilter + ")").css("background", "#42f4eb");
                //$("#divUserList div:containsIN(" + searchFilter + ")").css("color", "black");

                var container = $("#divUserList :containsIN(" + searchFilter + ")")
                container.each(function (index, item) {

                    if (item.tagName == "SPAN") {

                        $(item).css("text-decoration", "underline");
                        $(item).css("background", "#42f4eb");
                    }

                });
            }

        });


        function validateDate(date) {

            var validformat = /^\d{2}\/\d{2}\/\d{4}$/ //Basic check for format validity
            var returnval = false
            if (!validformat.test(date)) {

                returnval = false;
            }
            else { //Detailed check for valid date ranges
                var monthfield = date.split("/")[0]
                var dayfield = date.split("/")[1]
                var yearfield = date.split("/")[2]
                var dayobj = new Date(yearfield, monthfield - 1, dayfield)
                if ((dayobj.getMonth() + 1 != monthfield) ||
                    (dayobj.getDate() != dayfield) || (dayobj.getFullYear() != yearfield))

                    returnval = false;
                else
                    returnval = true
            }

            return returnval
        }


        $('#btnCloseUserList').click(function () {
            $('#divUserList').css('display', 'none');
        });
    </script>
    @if (TempData["JavaScriptFunction"] != null)
    {
        <script type="text/javascript">
            @Html.Raw(TempData["JavaScriptFunction"].ToString())
        </script>
    }
</body>
</html>

