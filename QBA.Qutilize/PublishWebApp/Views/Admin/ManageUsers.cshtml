@model QBA.Qutilize.WebApp.Models.UserModel

@{
    ViewBag.Title = "ManageUsers";
    Layout = "~/Views/Shared/_ViewStartPrivate.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>ManageUsers</title>
</head>
<body>



    @{
        var strMSGforSave = string.Empty;
        string strStyle = string.Empty;
        string strErrorStyle = string.Empty;
        var strMsgforErr = string.Empty;
        // var strerrorStyle = string.Empty;

        var errMsg = TempData["ErrMsg"] != null ? TempData["ErrMsg"] : "";

        var ErrStatus = TempData["ErrStatus"] != null ? Convert.ToBoolean(TempData["ErrStatus"]) : false;
        if (ErrStatus == true)
        {
            strMsgforErr = errMsg.ToString();

        }
        else
        {
            strMSGforSave = errMsg.ToString();
            strMsgforErr = string.Empty;
        }

        if (strMSGforSave != "")
        {
            strStyle = "display:block";
        }
        else
        {
            strStyle = "display:none";
        }
        if (strMsgforErr != "")
        {
            strErrorStyle = "display:block";
        }
        else
        {
            strErrorStyle = "display:none";
        }
    }

    <div class="form-horizontal col-md-12">
        <div class="alert alert-success alert-dismissible" role="alert" id="divSuccess" style="@strStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            @strMSGforSave
        </div>
    </div>
    <div class="form-horizontal col-md-12">
        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg1" name="ErrorMsg1" style="@strErrorStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            @strMsgforErr
        </div>
    </div>
    <h4>Manage User</h4>
    <br />
    <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">
        <table class="table table-striped table-bordered myTable" id="tblGridListViewPost">
            <thead id="tblHeadListViewPost">
                <tr>

                    <th class="text-center tblHeaderColor">ID</th>
                    <th class="text-center tblHeaderColor">User Name</th>
                    <th class="text-center tblHeaderColor">Name</th>
                    <th class="text-center tblHeaderColor">Email</th>
                    <th class="text-center tblHeaderColor">Contact No.</th>
                    <th class="text-center tblHeaderColor">Designation</th>
                    <th class="text-center tblHeaderColor">Date Of Birth</th>
                    <th class="text-center tblHeaderColor">Gender</th>
                    <th class="text-center tblHeaderColor">Manager Name</th>
                    <th class="text-center tblHeaderColor">Organisation</th>
                    <th class="text-center tblHeaderColor">Status</th>
                    <th class="text-center tblHeaderColor">Edit</th>


                </tr>
            </thead>
            <tbody>
                @Html.Action("LoadUsersData", "Admin")
            </tbody>
        </table>
    </div>
    <div class="col-md-12"><br /></div>
    <div class="form-horizontal col-md-12">
        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg" name="ErrorMsg" style="display:none">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            <span id="errormsg"></span>
        </div>
    </div>
    @using (Html.BeginForm("ManageUsers", "Admin", FormMethod.Post, new { onsubmit = "return checkUserForm()" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">
            <h4>User Details</h4>
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)


            <div class="form-group">
                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UserCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrganisationList, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.OrganisationList, new SelectList(Model.OrganisationList, "id", "orgname"), "Please select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.UserOrgId)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DepartmentList, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.DepartmentList, new SelectList(Model.DepartmentList, "DepartmentID", "Name"), "Please select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.DepartmentIdsInString)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UsersList, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.UsersList, new SelectList(Model.UsersList, "Id", "Name"), "Please select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.ManagerId)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                </div>
            </div>


            @if (Model.ID > 0)
            {
                <div class="form-group">
                    @Html.Label("", new { @class = "control-label col-md-2" })
                    <div class="col-md-10 pull-right">
                        @*@Html.ActionLink("Change Password", "#", new { id = Model.ID }, new { @class = "editCourseModal", @data_target = "updatePasswordModal" })*@
                        <a href="" data-toggle="modal" data-target="#updatePasswordModal">Change Password</a>

                    </div>
                </div>
            }
            else
            {

                <div class="form-group">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                </div>
            </div>




            <div class="form-group">
                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control",  @maxlength = "10" ,type = "number"} })
                    @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AlterNetContactNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.AlterNetContactNo, new { htmlAttributes = new { @class = "form-control", @maxlength = "10",  @type = "number"  } })
                    @Html.ValidationMessageFor(model => model.AlterNetContactNo, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                        @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" ,Value = Model.BirthDate != null ?
                Model.BirthDate.Value.Date.ToString("yyyy/MM/dd") : null
                       } })
                            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.birthDayToDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.birthDayToDisplay, new { htmlAttributes = new { @class = "form-control" }  })
                    @Html.ValidationMessageFor(model => model.birthDayToDisplay, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <select class="form-control" id="ddlUserGender" name="ddlUserGender">
                        <option>Select Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                    @Html.HiddenFor(model => model.Gender)
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div id="updatePasswordModal" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color:#626262;">Password Update</h4>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">
                        <div class="form-group">
                            @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.PasswordFor(model => model.NewPassword, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.ConfirmNewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.PasswordFor(model => model.ConfirmNewPassword, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ConfirmNewPassword, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-horizontal col-md-12">
                            <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsgForPassword" name="ErrorMsgForPassword" style="display:none">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <span id="errormsgforUpdatePasssword"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="button" class="btn btn-default" id="updatePassword">Update</button>
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">

                </div>
            </div>

        </div>
    </div>

    <script type="text/javascript">
        //$(document).ready(function () {
        //    $('#DepartmentList').multiselect({
        //        enableCaseInsensitiveFiltering: true,
        //        buttonWidth: 300,
        //        enableFiltering: true
        //    });
        //});
        $('#birthDayToDisplay').datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "-90:+00",
            maxDate: new Date()
        });
        $("#tblGridListViewPost").dataTable();


        var orgId = $('#UserOrgId').val();

        if (orgId != 0) {
            $('#OrganisationList').val(orgId);

            if ($('#OrganisationList option').length == 2) {
                $("#OrganisationList").prop("disabled", true);
            }

        }

        var managerId = $('#ManagerId').val();
        if (managerId != 0) {
            $('#UsersList').val(managerId);
        }
        $('#UsersList').change(function () {
            $('#ManagerId').val(this.value)
        })

        $('#ddlUserGender').change(function () {
            $('#Gender').val(this.value)
        })
        var gender = $('#Gender').val();
        if (gender != "") {
            $('#ddlUserGender').val(gender);
        }

        $('#DepartmentList').change(function () {

            //var deptIds = $("#DepartmentList option:selected").map(function () { return this.value }).get().join(", ");
            var deptIds = $("#DepartmentList option:selected").val();

            $('#DepartmentIdsInString').val(deptIds);

        })

        if ($('#DepartmentIdsInString').val() != "") {

            var selectedOptions = $('#DepartmentIdsInString').val().split(",");

            for (var i in selectedOptions) {
                var optionVal = selectedOptions[i];
                $("#DepartmentList").find("option[value=" + optionVal + "]").prop("selected", "selected");
            }
           // $("#DepartmentList").multiselect('reload');
        }


        $("#OrganisationList").change(function () {
            $('#UserOrgId').val(this.value);
            var orgID = $("#UserOrgId").val();
            orgId = $("#UserOrgId").val();
            $.ajax
                ({
                    url: '@Url.Action("GetManagers", "Admin")',
                    type: 'POST',
                    datatype: 'application/json',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        orgId: +orgID
                    }),
                    success: function (result) {
                        //console.log(result);
                        $("#UsersList").html("");
                        $("#UsersList").append(result);

                    },
                    error: function () {
                        alert("Whooaaa! Something went wrong..")
                    },
                });

            $.ajax
                ({
                    url: '@Url.Action("GetDepartments", "Admin")',
                    type: 'POST',
                    datatype: 'application/json',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        orgId: +orgID
                    }),
                    success: function (result) {
                        //console.log(result);
                        $('#DepartmentList').html('');
                        $('#DepartmentList').append(result);

                    },
                    error: function () {
                        alert("Whooaaa! Something went wrong..")
                    },
                });

        });

        $("#EmailId").blur(function () {
        var id = document.getElementById("ID").value;
        if (id == 0) {
            var email = $("#EmailId").val();
            if (email != "") {

                $.ajax({
                    url: '@Url.Action("Checkemail", "Admin")',
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        "email": email,
                        "orgId": orgId
                    }),
                    success: function (response) {
                        console.log(response);
                        if (response == "Duplicate") {
                            document.getElementById("errormsg").innerHTML = "E-Mail allready exist.";
                            document.getElementById("ErrorMsg").style.display = 'block';

                        }
                        else{
                            document.getElementById("errormsg").innerHTML = "E-Mail allready exist.";
                            document.getElementById("ErrorMsg").style.display = 'none';
                        }
                    },
                    error: function (response) {
                        console.log(response);
                    }
                });
            } else {
                document.getElementById("errormsg").innerHTML = "Please provide valid Email.";
                document.getElementById("ErrorMsg").style.display = 'block';

                return false;

            }
        }
        });

        $("#ContactNo").blur(function () {
            var ContactNo = $("#ContactNo").val
            if (ContactNo != "") {

                if ($("#ContactNo").val().length != 10) {
                    document.getElementById("errormsg").innerHTML = "Invalid length contact no.";
                    document.getElementById("ErrorMsg").style.display = 'block';
                    return false;
                }
               // ValidateContactNo(ContactNo);
            }

        });

        $("#AlterNetContactNo").blur(function () {
            var ContactNo = $("#AlterNetContactNo").val
            if (ContactNo != "") {

                if ($("#AlterNetContactNo").val().length != 10) {
                    //$("#AlterNetContactNo").val('');
                    document.getElementById("errormsg").innerHTML = "Invalid length in alternate contact no.";
                    document.getElementById("ErrorMsg").style.display = 'block';
                    //$("#AlterNetContactNo").val('');
                    return false;
                }

            }

        });

        function ValidateContactNo(contactNo) {
            var numericResult = $.isNumeric(contactNo)
            if (numericResult == false) {
                document.getElementById("errormsg").innerHTML = "Invalid contact no.";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }

            //var inp = document.getElementById('ContactNo');
            //console.log(inp.value.length);
            console.log(contactNo.val().length);
            if (contactNo.val().length != 10) {

                document.getElementById("errormsg").innerHTML = "Invalid contact no.";
                document.getElementById("ErrorMsg").style.display = 'block';

                return false;
            }
        }

        function checkUserForm() {

            var id = document.getElementById("ID").value;


            var userName = document.getElementById("UserName").value;
            var name = document.getElementById("Name").value;
            var userCode = document.getElementById("UserCode").value;

            var Email = document.getElementById("EmailId").value;
            var orgId = $('#OrganisationList').val();
            var managerId = $('#UsersList').val();
            var departmentId = $('#DepartmentList').val();

            var designation = $('#Designation').val();
            var contactNo = $('#ContactNo').val();
            var birthDate = $('#birthDayToDisplay').val();
            var gender = $('#ddlUserGender').val();

            if (userName == "") {
                document.getElementById("errormsg").innerHTML = "Please Provide User's User Name";
                document.getElementById("ErrorMsg").style.display = 'block';

                return false;
            }

            if (name == "") {
                document.getElementById("errormsg").innerHTML = "Please Provide User's name";
                document.getElementById("ErrorMsg").style.display = 'block';


                return false;
            }
            if (userCode == "") {
                document.getElementById("errormsg").innerHTML = "Please Provide User's code.";
                document.getElementById("ErrorMsg").style.display = 'block';

                return false;
            }

            if (orgId == 0) {
                document.getElementById("errormsg").innerHTML = "Please select organisation";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }
            if (departmentId == 0) {
                document.getElementById("errormsg").innerHTML = "Please select department.";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }
            if (Email == "") {
                document.getElementById("errormsg").innerHTML = "Please Provide User's email";
                document.getElementById("ErrorMsg").style.display = 'block';

                return false;
            }
            if (Email != "") {
                var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
                if (regex.test(Email) == false) {
                    document.getElementById("errormsg").innerHTML = "Please provide valid Email";
                    document.getElementById("ErrorMsg").style.display = 'block';

                    return false;
                }
            }

            if ($("#ContactNo").val() != "") {
                if ($("#ContactNo").val().length != 10) {

                    document.getElementById("errormsg").innerHTML = "Invalid contact no.";
                    document.getElementById("ErrorMsg").style.display = 'block';

                    return false;
                }
            }
            if ($("#AlterNetContactNo").val() != "") {
                if ($("#AlterNetContactNo").val().length != 10) {
                    document.getElementById("errormsg").innerHTML = "Invalid alternate contact no.";
                    document.getElementById("ErrorMsg").style.display = 'block';

                    return false;
                }
            }







            if (id > 0) {
                //var oldpassword = document.getElementById("oldpassword").value;
                //if (oldpassword == "") {
                //    document.getElementById("errormsg").innerHTML = "Please enter your old password";
                //    document.getElementById("ErrorMsg").style.display = 'block';
                //    return false;
                //}
                //var password = document.getElementById("Password").value;
                //var confirmpassword = document.getElementById("confirmpassword").value;

                //if (password != "") {
                //    if (confirmpassword == "") {
                //        document.getElementById("errormsg").innerHTML = "Please confirm your Password";
                //        document.getElementById("ErrorMsg").style.display = 'block';
                //        return false;
                //    }
                //    if (password != confirmpassword) {
                //        document.getElementById("errormsg").innerHTML = "Password and Confirm Password Mismatched";
                //        document.getElementById("ErrorMsg").style.display = 'block';
                //        return false;
                //    }

                //}
                //else {

                //    return true;
                //}
            } else {

                var password = document.getElementById("Password").value;
                var confirmpassword = document.getElementById("ConfirmPassword").value;

                if (password == "") {
                    document.getElementById("errormsg").innerHTML = "Please provide your Password";
                    document.getElementById("ErrorMsg").style.display = 'block';
                    //document.getElementById("Password").focus();
                    //document.getElementById("Password").style.borderColor = "Red";
                    return false;
                }
                if (password != "") {
                    if (confirmpassword == "") {
                        document.getElementById("errormsg").innerHTML = "Please confirm your Password";
                        document.getElementById("ErrorMsg").style.display = 'block';
                        //document.getElementById("ConfirmPassword").focus();
                        //document.getElementById("ConfirmPassword").style.borderColor = "Red";
                        return false;
                    }
                    if (password != confirmpassword) {
                        document.getElementById("errormsg").innerHTML = "Password and Confirm Password Mismatched";
                        document.getElementById("ErrorMsg").style.display = 'block';
                        return false;
                    }

                }
                //else {

                //    return true;
                //}
            }


            if (designation == "") {
                document.getElementById("errormsg").innerHTML = "Please provide designation.";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }
            if (contactNo == "") {
                document.getElementById("errormsg").innerHTML = "Please provide contact no.";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }

            if ($("#ContactNo").val() != "" && $("#AlterNetContactNo").val() != "") {
                if ($("#ContactNo").val() == $("#AlterNetContactNo").val()) {
                    document.getElementById("errormsg").innerHTML = "Contact no and alternate no can not be same.";
                    document.getElementById("ErrorMsg").style.display = 'block';

                    return false;
                }
            }

            if (birthDate == "") {
                document.getElementById("errormsg").innerHTML = "Please provide date of birth.";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }

            if (gender == "Select Gender") {
                document.getElementById("errormsg").innerHTML = "Please select gender.";
                document.getElementById("ErrorMsg").style.display = 'block';
                return false;
            }

            if (managerId == "") {

                var result = confirm("You have not selected manager from the list. do you want to continue?");
                if (result ==false) {

                    return false;
                }
            }



            return true;
        }

         $("#updatePassword").bind("click", function () {

             var password = $("#NewPassword").val();
             var UpdatePassword = $("#ConfirmNewPassword").val();

             if (password == "") {
                 document.getElementById("errormsgforUpdatePasssword").innerHTML = "Please enter new password";
                 document.getElementById("ErrorMsgForPassword").style.display = 'block';
                 return false;

             }
             if (UpdatePassword == "") {
                 document.getElementById("errormsgforUpdatePasssword").innerHTML = "Please confirem new password";
                 document.getElementById("ErrorMsgForPassword").style.display = 'block';
                 return false;
             }
             if (password != UpdatePassword) {
                 document.getElementById("errormsgforUpdatePasssword").innerHTML = "Password and Confirm Password Mismatched";
                 document.getElementById("ErrorMsgForPassword").style.display = 'block';
                 return false;

             }
             //alert(UpdatePassword);
         $.ajax({
            url: '@Url.Action("UpdatePassword", "Admin")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",

            data: JSON.stringify({
                "Password": password,
                "id":  @Model.ID
            }),

            success: function (response) {
                //jQuery('#myEditModal').modal('show');
                alert(response);

                $('#updatePasswordModal').modal('toggle');
                //alert(response[0]._id)
            },
            error: function (response) {
                console.log(response);
            }
        });
    });
    </script>
</body>

</html>
