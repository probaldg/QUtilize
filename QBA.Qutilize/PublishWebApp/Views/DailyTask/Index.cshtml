@model QBA.Qutilize.WebApp.Models.DailyTaskViewModel
@using System.Web.Helpers;

@{


    ViewBag.Title = "Daily Task";
    Layout = "~/Views/Shared/_ViewStartPrivate.cshtml";

}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Daily Task</title>
</head>
<body>
    @{
        //List<dynamic> obj1 = new List<dynamic>();
        //obj1 = ViewBag.Total;
        //var grid = new WebGrid(obj1);

        var strMSGforSave = string.Empty;
        string strStyle = string.Empty;

        var strMsgforErr = string.Empty;
        var strmsgStyle = string.Empty;

        var errSts = TempData["ErrMsg"];

        var ErrStatus = TempData["ErrStatus"];
        if (ErrStatus != null)
        {
            strMSGforSave = ErrStatus.ToString();
        }
        if (strMSGforSave != "")
        {
            strStyle = "display:block";
        }
        else
        {
            strStyle = "display:none";
        }
    }

    <div class="form-horizontal col-md-12">
        <div class="alert alert-success alert-dismissible" role="alert" id="divSuccessMeassage" style="@strStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close" id="saveMsg">
                <span aria-hidden="true">&times;</span>
            </button>
            Data Saved Successfully.
        </div>
    </div>
    <h4>Daily Task</h4>
    <br />

    <div style="width:100%;float:left; height:auto;">

        <div class="form-group">
            @Html.Label("Start date", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-2">
                @Html.DisplayFor(model => model.StartDate)

            </div>
            @Html.Label("End date", htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-3">
                @Html.DisplayFor(model => model.EndDate)
            </div>
        </div>
        <br />

        <br />
        <div class="form-horizontal col-md-12" id="ErrorMsg" name="ErrorMsg" style="display:none">
            <div class="alert alert-danger alert-dismissable fade in">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close" id="saveMsg">
                    <span aria-hidden="true">&times;</span>
                </button>
                <span id="errormsg"></span>
            </div>
        </div>
        <table class="table table-striped table-bordered myTable">
            <thead id="tblHeadListViewPost">
                <tr class="text-center tblHeaderColor">
                    <th class="text-center tblHeaderColor">Task Date (MM/DD/YYYY)</th>
                    <th class="text-center tblHeaderColor">Projects</th>
                    <th class="text-center tblHeaderColor">Task Name</th>
                    <th class="text-center tblHeaderColor">Description</th>
                    <th class="text-center tblHeaderColor">Start Time</th>
                    <th class="text-center tblHeaderColor">End Time</th>
                    <th class="text-center tblHeaderColor"></th>

                </tr>
            </thead>
            <tr>

                <td>
                    <input type="text" class="form-control input-sm datepicker" id="TaskDateInsert">
                </td>
                <td>
                    @Html.DropDownListFor(M => M.ProjectsList, new SelectList(Model.ProjectsList, "ProjectID", "ProjectName"), "Please select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.ProjectID)
                </td>
                <td>
                    @Html.DropDownListFor(model => model.ProjectTaskList, new SelectList(Model.ProjectTaskList, "TaskId", "TaskName"), "Please select", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.TaskName)
                    @*<input type="text" class="form-control input-sm" id="TaskNameInsert">*@
                </td>
                <td>
                    <input type="text" class="form-control input-sm" id="DescriptionInsert">
                </td>
                <td>
                    @*<input type="text" class="form-control input-sm" pattern="([01]?[0-9]|2[0-3])(:[0-5][0-9]){2}" id="StartTimeInsert">*@
                    <input type="text" class="form-control input-sm" id="StartTimeInsert">

                </td>
                <td>
                    <input type="text" class="form-control input-sm" id="EndTimeInsert">
                </td>

                <td colspan="3">
                    @*<input type="button" class="btn btn-primary" value="Create" onclick="location.href='@Url.Action("InsertDailyTask", "DailyTask")'" />*@
                    <input type="submit" value="&#xe172;" class="btn btn-primary glyphicon " id="btnInsert" title="Insert" />
                </td>

            </tr>
        </table>



        @{if (Model != null)
            {
                var grid = new WebGrid(Model.DailyTaskList, canPage: false, canSort: false, ajaxUpdateContainerId: "gridContent");
                //grid.Pager(WebGridPagerModes.NextPrevious);

        <div id="gridContent" class="table-responsive">

            @grid.GetHtml(tableStyle: "table table-striped table-bordered myTable",
            headerStyle: "text-center tblHeaderColor",
            alternatingRowStyle: "webgrid-alternating-row",
            selectedRowStyle: "select",
            columns: grid.Columns(

      grid.Column("TaskDate (MM/DD/YYYY)",
             style: "col2",
             format: @<text>
                    <span id="TaskDate_@item.DailyTaskId" class="display-mode">@item.TaskDate.ToString("MM/dd/yyyy") </span>

                    @Html.TextBox("TaskDate-Edit", ((DateTime)item.TaskDate).ToString("MM/dd/yyyy"), new { @class = "edit-mode datepicker", @id = "TaskDate-Edit" + item.DailyTaskId })

            </text>),
             grid.Column("ProjectName",
            style: "col2",
            format: @<text>
                <span id="ProjectName" class="display-mode">@item.ProjectName</span>
                <span id="ProjectName" class="edit-mode">@item.ProjectName</span>

            </text>),

              grid.Column("TaskName",
             style: "col2",
             format: @<text>
                <span id="TaskName" class="display-mode">@item.TaskName</span>
                <span id="TaskName" class="edit-mode">@item.TaskName</span>

            </text>),
                        @*grid.Column("TaskName",
                        style: "col2",
                        format: @<text>
                            <span id="TaskName_@item.DailyTaskId" class="display-mode">@item.TaskName</span>

                            @Html.TextBox("TaskName-Edit", (string)item.TaskName, new { @class = "edit-mode", @id = "TaskName-Edit" + item.DailyTaskId })
                        </text>),*@ /*second column end*/


                               grid.Column("Description",
                           style: "col2",
                           format: @<text>
                            <span id="Description_@item.DailyTaskId" class="display-mode">@item.Description</span>
                            @Html.TextBox("Description-Edit", (string)item.Description, new { @class = "edit-mode", @id = "Description-Edit" + item.DailyTaskId })
                        </text>),/*fourth column end*/

                                 grid.Column("Start Time",
                                    style: "col2",
                                    format: @<text>
                                        <span id="StartTime_@item.DailyTaskId" class="display-mode">@item.StartTimeToDisplay</span>
                                        <span id="ActualStartTime_@item.DailyTaskId" style="display:none">@item.StartTime</span>
                                        @Html.TextBox("StartTime-Edit", (string)item.StartTimeToDisplay, new { @class = "edit-mode timePicker", @id = "StartTime-Edit" + item.DailyTaskId })
                                    </text>),
                                          grid.Column("End Time",
                                          style: "col2",
                                          format: @<text>
                                            <span id="EndTime_@item.DailyTaskId" class="display-mode">@item.EndTimeToDisplay</span>
                                            <span id="ActualEndTime_@item.DailyTaskId" style="display:none">@item.EndTime</span>

                                            @Html.TextBox("EndTime-Edit", (string)item.EndTimeToDisplay, new { @class = "edit-mode timePicker", @id = "EndTime-Edit" + item.DailyTaskId })
                                        </text>),

                                                         grid.Column("Hours",
                                                         style: "col2",
                                                         format: @<text>
                                                            @* <span id="hours" class="display-mode">@item.Hours.ToString("#,0.00")</span>*@
                                                            <span id="hours_@item.DailyTaskId" class="display-mode">@item.HoursToDisplay</span>


                                                        </text>),

                                                           grid.Column("",
                                                           style: "col1",
                                                           format: @<text><div style="padding-left:0px; float:right;width:100px;">


                                                                @*<button class="btn btn-primary edit-item display-mode" id="@item.DailyTaskId">Edit</button>*@
                                                                <button class="btn btn-primary edit-item display-mode" id="@item.DailyTaskId" title="Edit"> <span class="glyphicon">&#x270f;</span></button>
                                                                <button class="btn btn-primary display-mode delete-item" id="@item.DailyTaskId"><span class="glyphicon" title="Delete">&#xe014;</span></button>
                                                                <button class="btn btn-primary save-item edit-mode" id="@item.DailyTaskId"><span class="glyphicon" title="Update">&#xe013;</span></button>
                                                                <button class="btn btn-primary cancel-item edit-mode" id="@item.DailyTaskId"><span class="glyphicon" title="Cancel">&#xe014;</span></button>
                                                            </div>
                                                        </text>)) /*End of Coloumns*/
                                                             ) @*end of grid*@

                                                        </div>
                                                                                                }
        }
    </div>


    <style>
        /*th {
            background-color: gray;
            color: white;
        }*/
        .timepicker {
            z-index: 9999;
        }
    </style>
    <script type="text/javascript">
        var curr = new Date;
        var first = curr.getDate() - curr.getDay();
        var first = first + 1
        //var first = first

        var last = first + 6;

        $('#TaskDateInsert').datepicker({
            //minDate: new Date(curr.setDate(first)),
            minDate: new Date(),
            maxDate: new Date()
        });
        //$("#StartTimeInsert").timepicker({ 'scrollDefault': 'now' })
        //$("#EndTimeInsert").timepicker({ 'scrollDefault': 'now' })

        $("#StartTimeInsert").timepicker({ timeFormat: 'HH:mm' });
        $("#EndTimeInsert").timepicker({ timeFormat: 'HH:mm' });

        $(".datepicker").datepicker({
            autoclose: true, todayBtn: 'linked',
            //minDate: new Date(curr.setDate(first)),
            minDate: new Date(),
            maxDate: new Date()
        })


        //$(".timePicker").timepicker({ closeOnWindowScroll: false, use24hours: true});
        $(".timePicker").timepicker({ timeFormat: 'HH:mm'  });

        $('.edit-mode').hide();

        $('.edit-item').on('click', function () {
            $('.edit-mode').hide();
            $('.delete-mode').hide();
            $('.display-mode').show();
            var tr = $(this).parents('tr:first');
            tr.find('.edit-mode, .display-mode').toggle();
        });

        $('.cancel-item').on('click', function () {
            var tr = $(this).parents('tr:first');
            tr.find('.display-mode,.edit-mode').toggle();
        });

        $('.delete-item').on('click', function () {
            if (confirm("Are you sure to delete this Task?")) {
                var tr = $(this).parents('tr:first');
                var ID = $(this).prop('id');
                $.post(
                    '@Url.Action("DeleteDailyTask", "DailyTask")',
                    { ID: ID },
                    function (item) {
                        tr.remove();
                        alert('Succesfully deleted.')
                    }, "json");
            }
        });

        $('.save-item').on('click', function () {

            var tr = $(this).parents('tr:first');
            var DailyTaskId = $(this).prop('id');
            var taskDate = tr.find('#TaskDate-Edit' + DailyTaskId).val();
            var taskName = tr.find('#TaskName-Edit' + DailyTaskId).val();
            var Description = tr.find('#Description-Edit' + DailyTaskId).val();
            var startTime = tr.find('#StartTime-Edit' + DailyTaskId).val();
            var actualStartTime = tr.find('#ActualStartTime_' + DailyTaskId).html();
            var actualEndTime = tr.find('#ActualEndTime_' + DailyTaskId).html();
            var EndTime = tr.find('#EndTime-Edit' + DailyTaskId).val();

            if (taskDate == "") {
                ShowError("Task date is required to edit the task.");
                return false;
            }

            if (Description == "") {
                ShowError("Description is required to edit the task.");
                return false;
            }

            if (startTime == "") {
                ShowError("Start time is required to edit the task.");
                return false;
            }
            if (EndTime == "") {
                ShowError("End time is required to edit the task.");
                return false;
            }

            var CreatedTaskDate = new Date(taskDate);
            var ActualDateInStartTime = new Date(actualStartTime);

            var updatedStartTimeString;
            var updatedStartTime;

            var updatedEndTimeString;
            var updatedEndTime;

            if (CreatedTaskDate.toDateString() == ActualDateInStartTime.toDateString()) {
                updatedStartTimeString = ActualDateInStartTime.getFullYear().toString() + '-' + (ActualDateInStartTime.getMonth() + 1).toString() + '-' + ActualDateInStartTime.getDate().toString() + ' ' + startTime.split(':')[0].toString() + ':' + startTime.split(':')[1].toString();
                updatedStartTime = new Date(updatedStartTimeString);

                if (EndTime != "") {
                    
                     updatedEndTimeString = ActualDateInStartTime.getFullYear().toString() + '-' + (ActualDateInStartTime.getMonth() + 1).toString() + '-' + ActualDateInStartTime.getDate().toString() + ' ' + EndTime.split(':')[0].toString() + ':' + EndTime.split(':')[1].toString();
                    updatedEndTime = new Date(updatedEndTimeString);
                }
            }
            else {
                updatedStartTimeString = CreatedTaskDate.getFullYear().toString() + '-' + (CreatedTaskDate.getMonth() + 1).toString() + '-' + CreatedTaskDate.getDate().toString() + ' ' + startTime.split(':')[0].toString() + ':' + startTime.split(':')[1].toString();
                updatedStartTime = new Date(updatedStartTimeString);

                if (EndTime != "") {
                   
                    var updatedEndTimeString = CreatedTaskDate.getFullYear().toString() + '-' + (CreatedTaskDate.getMonth() + 1).toString() + '-' + CreatedTaskDate.getDate().toString() + ' ' + EndTime.split(':')[0].toString() + ':' + EndTime.split(':')[1].toString();
                    updatedEndTime = new Date(updatedEndTimeString);
                }
            }

            var diff = (updatedEndTime - updatedStartTime) / 1000;
            diff /= 3600;

            if (diff >= 24) {
                ShowError("time diffrence can not be greater than 24 hours..");
                return false;
            }

            if (updatedStartTime > updatedEndTime) {
                ShowError("start time can not be greater than end time..");
                return false;
            }



            @*$.post(
                '@Url.Action("UpdateDailyTask", "DailyTask")',
                { DailyTaskId: DailyTaskId, TaskDate: taskDate, TaskName: taskName, Description: Description, StartTime: startTime, EndTime: EndTime},
                function (item) {
                   // alert(item.TaskDate);
                    tr.find('#TaskDate_' + DailyTaskId).text(item.TaskDate);
                    tr.find('#TaskName_' + DailyTaskId).text(item.TaskName == null ? "" : item.TaskName);
                    tr.find('#Description_' + DailyTaskId).text(item.TaskDescription == null ? "" : item.TaskDescription);
                    tr.find('#StartTime_' + DailyTaskId).text(item.StartTime);
                    tr.find('#EndTime_' + DailyTaskId).text(item.EndTime== null?"":item.EndTime);
                    tr.find('#hours_' + DailyTaskId).text(item.Hours);

                }, "json");
            tr.find('.edit-mode, .display-mode').toggle();
            $('#ErrorMsg').css("display", "none");*@


            $.post(
                '@Url.Action("UpdateDailyTask", "DailyTask")',
                { DailyTaskId: DailyTaskId, TaskDate: taskDate, TaskName: taskName, Description: Description, StartTimeString: updatedStartTimeString, EndTimeString: updatedEndTimeString},
                function (item) {
                    console.log(item);
                   // alert(item.TaskDate);
                    tr.find('#TaskDate_' + DailyTaskId).text(item.TaskDate);
                    tr.find('#TaskName_' + DailyTaskId).text(item.TaskName == null ? "" : item.TaskName);
                    tr.find('#Description_' + DailyTaskId).text(item.TaskDescription == null ? "" : item.TaskDescription);
                    tr.find('#StartTime_' + DailyTaskId).text(item.StartTime);
                    tr.find('#EndTime_' + DailyTaskId).text(item.EndTime== null?"":item.EndTime);
                    tr.find('#hours_' + DailyTaskId).text(item.Hours);

                }, "json").done(function () {
                    tr.find('.edit-mode, .display-mode').toggle();
                    $('#ErrorMsg').css("display", "none");
                })
                .fail(function () {
                    
                    ShowError("some error occured.")
                    return false;
                });


        });


        function ConvertDateFormat(d, t) {
            var dt = d.val().split('/');
            return dt[1] + '/' + dt[0] + '/' + dt[2] + ' ' + dt[3];
        }


         $('#btnInsert').click(function () {

             var taskDate = $('#TaskDateInsert').val();

             var projectID = $('#ProjectsList').val();

             var taskNameID = $('#ProjectTaskList').val();// $('#TaskNameInsert').val();
             var taskName = $("#ProjectTaskList option:selected").text();
             var startTime = $('#StartTimeInsert').val();

             var endTime = $('#EndTimeInsert').val();
             var dsec = $('#DescriptionInsert').val();


                if (taskDate == "") {
                    ShowError("Task date is required..")
                    return false;
                }
                if (projectID == 0) {
                    ShowError("Please select a project..")
                    return false;
                }

                if (taskName == "") {
                    ShowError("Please insert task name");
                    return false;
                 }
                if (taskNameID == "0") {
                     ShowError("Please select task name");
                     return false;
                 }

                if (startTime== "") {
                    ShowError("Plese insert start time");
                    return false;
                }
                if (endTime == "") {
                    ShowError("Plese insert end time");
                    return false;
                }


             var stt = new Date("November 13, 2013 " + startTime);
             stt = stt.getTime();

             var endt = new Date("November 13, 2013 " + endTime);
             endt = endt.getTime();

             var diff = (endt - stt) / 1000;
             diff /= 3600;

             if (diff >= 24) {
                 ShowError(" time diffrence can not be greater than 24 hours..");
                 return false;
             }
             if (stt > endt) {
                 ShowError("start time can not be greater than end time..");
                 return false;
             }


                $.ajax({
                    url: '@Url.Action("InsertDailyTask", "DailyTask")',
                    type: 'POST',
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        "taskDate": taskDate,
                        "projectID": projectID,
                        "startTime": startTime,
                        "endTime":endTime,
                        "taskName": taskName,
                        "descreption": dsec,
                    }), //Data end
                    success: function (response) {

                        if (response == "Success") {
                            //console.log(response);
                            // @strMSGforSave=response.val();
                           // alert('Task saved succesfully');
                            location.reload();
                        }
                        else if (response == "Invalid") {
                           // @strMSGforSave=response
                            ShowError("Task time can not be greater than 24 hours..")
                            $('#ErrorMsg').css("display", "block");
                        }


                    }
                });// ajax end
        });// button click end

        function ShowError(message) {
            document.getElementById("errormsg").innerHTML = message;
            document.getElementById("ErrorMsg").style.display = 'block';
        }

        function diff_inHour(dt2, dt1) {

            var diff = (dt2.getTime() - dt1.getTime()) / 1000;
            diff /= 3600;
            return Math.abs(Math.round(diff));

        }
        //setTimeout(function () {
        //    $('#divSuccessMeassage').close();
        //}, 1000);
        setTimeout(function () {

            // code to close the modal
            $('#divSuccessMeassage').css('display','none')
        }, 2000);

        $(document).ready(function () {
            $("#gridContent table").dataTable();
        });

        $("#ProjectsList").change(function () {
            $('#ProjectID').val(this.value);
            var ProjID = $("#ProjectID").val();
            //orgId = $("#ProjectID").val();
            $.ajax
                ({
                    url: '@Url.Action("GetTask", "Admin")',
                    type: 'POST',
                    datatype: 'application/json',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        ProjID: +ProjID
                    }),
                    success: function (result) {
                        //console.log(result);
                        $("#ProjectTaskList").html("");
                        $("#ProjectTaskList").append(result);

                    },
                    error: function () {
                        alert("Whooaaa! Something went wrong..")
                    },
                });
        });
    </script>
</body>
</html>
