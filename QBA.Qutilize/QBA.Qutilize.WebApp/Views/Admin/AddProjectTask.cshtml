@model QBA.Qutilize.WebApp.Models.ProjectModel
@{
    ViewBag.Title = "AddProjectTask";
    Layout = "~/Views/Shared/_ViewStartPrivate.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Manage Projects Issue</title>
</head>
<body>
    @{
        var strMSGforSave = string.Empty;
        string strStyle = string.Empty;
        string strErrorStyle = string.Empty;
        var strMsgforErr = string.Empty;
        // var strerrorStyle = string.Empty;

        var errMsg = TempData["ErrMsg"] != null ? TempData["ErrMsg"] : "";

        var ErrStatus = TempData["ErrStatus"] != null ? Convert.ToBoolean(TempData["ErrStatus"]) : false;
        if (ErrStatus == true)
        {
            strMsgforErr = errMsg.ToString();

        }
        else
        {
            strMSGforSave = errMsg.ToString();
            strMsgforErr = string.Empty;
        }

        if (strMSGforSave != "")
        {
            strStyle = "display:block";
        }
        else
        {
            strStyle = "display:none";
        }
        if (strMsgforErr != "")
        {
            strErrorStyle = "display:block";
        }
        else
        {
            strErrorStyle = "display:none";
        }



    }
    <div class="form-horizontal col-md-12">
        <div class="alert alert-success alert-dismissible" role="alert" id="divSuccess" style="@strStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            @strMSGforSave
        </div>
    </div>
    <div class="form-horizontal col-md-12">
        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg1" name="ErrorMsg1" style="@strErrorStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            @strMsgforErr
        </div>
    </div>



    <h4>Add Project Task</h4>
    <br />
    <div align="right">
        <button class="btn btn-primary" onclick="downloadExcelFile()"><i class="fa fa-arrow-circle-down"></i>Download Template</button>
        <button class="btn btn-primary" onclick="ShowPopupforTemplateUpload()"><i class="fa fa-arrow-circle-up"></i>Bulk Upload</button>
        <input type="button" value="Add New Project Task" style="text-align: right;" class="btn btn-primary" onclick="AddNewProjectTask()">
    </div>

    <div>
        <ul class="nav nav-tabs">
            <li class="active">
                <a href="#tab1" style="font-weight:bold; font-size:medium">Task created by  @HttpContext.Current.Session["Name"].ToString()</a>
            </li>
            <li>
                <a href="#tab2" style="font-weight:bold; font-size:medium">Task assigned to me</a>
            </li>

        </ul>
    </div>

    <section id="tab1" class="tab-content active">
        <div>

            <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">

                <table class="table table-striped table-bordered myTable" id="tblGridListViewPost">
                    <thead id="tblHeadListViewPost">
                        <tr>
                            <th class="text-center tblHeaderColor sorting">ID</th>
                            <th class="text-center tblHeaderColor sorting">Task Name</th>
                            <th class="text-center tblHeaderColor sorting">Task Code</th>
                            <th class="text-center tblHeaderColor sorting">Parent task Name</th>
                            <th class="text-center tblHeaderColor sorting">Project Name</th>
                            <th class="text-center tblHeaderColor sorting">Start Date</th>
                            <th class="text-center tblHeaderColor sorting">End Date</th>
                            <th class="text-center tblHeaderColor sorting">Expected Time</th>
                            <th hidden="hidden" class="text-center tblHeaderColor sorting">Actual Start Date</th>
                            <th hidden="hidden" class="text-center tblHeaderColor sorting">Actual End Date</th>
                            <th class="text-center tblHeaderColor sorting">Task Status</th>
                            <th class="text-center tblHeaderColor sorting">Status</th>
                            <th class="text-center tblHeaderColor sorting">Percentage Complete</th>
                            <th class="text-center tblHeaderColor sorting">IsMilestone</th>
                            <th hidden="hidden" class="text-center tblHeaderColor sorting">Edit</th>
                            <th class="text-center tblHeaderColor sorting">View</th>
                        </tr>
                    </thead>
                    <tbody id="tBosyTaskList">
                        @Html.Action("LoadProjectTaskData", "Admin")
                    </tbody>
                </table>
            </div>
        </div>
    </section>
    <section id="tab2" class="tab-content  hide">
        <div>

            <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">

                <table class="table table-striped table-bordered myTable" id="tblGridListViewPost1">
                    <thead id="tblHeadListViewPost">
                        <tr>
                            <th class="text-center tblHeaderColor sorting">ID</th>
                            <th class="text-center tblHeaderColor sorting">Task Name</th>
                            <th class="text-center tblHeaderColor sorting">Task Code</th>
                            <th class="text-center tblHeaderColor sorting">Parent task Name</th>
                            <th class="text-center tblHeaderColor sorting">Project Name</th>
                            <th class="text-center tblHeaderColor sorting">Start Date</th>
                            <th class="text-center tblHeaderColor sorting">End Date</th>
                            <th class="text-center tblHeaderColor sorting">Expected Time</th>
                            <th hidden="hidden" class="text-center tblHeaderColor sorting">Actual Start Date</th>
                            <th hidden="hidden" class="text-center tblHeaderColor sorting">Actual End Date</th>
                            <th class="text-center tblHeaderColor sorting">Task Status</th>
                            <th class="text-center tblHeaderColor sorting">Status</th>
                            <th class="text-center tblHeaderColor sorting">Percentage Complete</th>
                            <th class="text-center tblHeaderColor sorting">IsMilestone</th>
                            <th class="text-center tblHeaderColor sorting">Change Task Status</th>
                            <th class="text-center tblHeaderColor sorting">View</th>
                        </tr>
                    </thead>
                    <tbody id="tBosyTaskList">
                        @Html.Action("LoadProjectTaskAssignedtoUser", "Admin")
                    </tbody>
                </table>
            </div>
        </div>
    </section>
    <div class="col-md-12"><br /></div>
    <div id="mymodalForNewTask" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color:#626262;" id="hProjectNameHeader"></h4>
                </div>

                <div class="modal-body">

                    <div class="col-md-12"><br /></div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-success alert-dismissible" role="alert" id="divSaveSuccess" style="display:none;">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            Data Saved Successfully.
                        </div>
                    </div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg" name="ErrorMsg" style="display:none">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>

                            <span id="errormsg"></span>
                        </div>
                    </div>
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()



                        <div class="form-horizontal col-md-12">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.ProjectTask.TaskId)
                            <input type="hidden" name="FileDirectory" id="FileDirectory" value="" />
                            <div class="form-group">
                                @Html.LabelFor(model => model.ActiveProjectList, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.ActiveProjectList, new SelectList(Model.ActiveProjectList, "ProjectID", "ProjectName"), "Select", new { @class = "form-control", onchange = "GetAssigneUserDetlByProject()" })
                                    @Html.HiddenFor(model => model.ActiveProjectID)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTypeList, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.ProjectTypeList, new SelectList(Model.ProjectTypeList, "ID", "Name"), "Select", new { @class = "form-control", disabled = "true" })
                                    @Html.HiddenFor(model => model.ProjectTypeID)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskCode, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.Label("Parent Task", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="ddlParentTask" class="form-control"><option value="">Select Task</option></select>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskStartDateDisplay, htmlAttributes: new { @class = "control-label col-md-2 " })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskStartDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskStartDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.TaskEndDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.TaskEndDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.TaskEndDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.IsMilestone, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        <input type="checkbox" id="ProjectTask_IsMilestone" />
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Assigned to", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10" id="divUserDDL">
                                    @Html.HiddenFor(model => model.ProjectTask.UserIdsTaskAssigned)
                                    <input type="hidden" id="UserIdsInString" name="UserIdsInString" />
                                    <select id="ddlUsersAssigned" class="form-control" multiple="multiple"><option value="">Select User</option></select>
                                </div>

                            </div>


                            <div class="form-group">
                                @Html.Label("Percentage Complete", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="ddlPercentage" class="form-control"><option value="">Select percentage</option></select>
                                </div>
                            </div>



                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.ActualTaskStartDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.ActualTaskStartDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.ActualTaskStartDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.ActualTaskEndDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.ActualTaskEndDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.ActualTaskEndDateDisplay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="ddlTaskStatus" class="form-control"><option value="0">Select status</option></select>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.ExpectedTime, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.ExpectedTime, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.ExpectedTime, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.EditorFor(model => model.ProjectTask.IsActive)
                                        @Html.ValidationMessageFor(model => model.ProjectTask.IsActive, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.IsValueAdded, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.EditorFor(model => model.ProjectTask.IsValueAdded)
                                        @Html.ValidationMessageFor(model => model.ProjectTask.IsValueAdded, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2">Attchments</label>
                                <div class="col-md-10">
                                    <div class='col-md-12' id='my-dropzoneUp'>
                                        <div class='col-md-12'>
                                            <div class='dropzone' id='my-dropzone' name='mainFileUploader'>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectTask.URL, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectTask.URL, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectTask.URL, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                    }

                </div>

                <div class="modal-footer">
                    <input type="button" id="btnProjectTaskSave" class="btn btn-default" value="Submit">

                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>

    </div>


    <div id="mymodal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <input type="hidden" id="SelectedProjectId" />

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color:#626262;" id="hProjectNameHeader">Change Task Status</h4>
                </div>

                <div class="modal-body">

                    <div class="col-md-12"><br /></div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-success alert-dismissible" role="alert" id="divSaveSuccess" style="display:none;">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            Data Saved Successfully.
                        </div>
                    </div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsgTaskpopup" name="ErrorMsgTaskpopup" style="display:none">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <span id="errormsgforTaskpopup"></span>
                        </div>
                    </div>
                    @using (Html.BeginForm())
                    {

                    <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:5px">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ProjectTask.TaskIdforstatus)
                        <input type="hidden" name="FileDirectoryForChangeStatus" id="FileDirectoryForChangeStatus" value="" />

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectTask.TaskCodeforChangeStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectTask.TaskCodeforChangeStatus, new { htmlAttributes = new { @class = "form-control", disabled = "true" } })
                                @Html.ValidationMessageFor(model => model.ProjectTask.TaskCodeforChangeStatus, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectTask.TaskNameforChangeStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectTask.TaskNameforChangeStatus, new { htmlAttributes = new { @class = "form-control", disabled = "true" } })
                                @Html.ValidationMessageFor(model => model.ProjectTask.TaskNameforChangeStatus, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <select id="ddlTaskStatusChange" class="form-control"><option value="0">Select</option></select>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectTask.ActualTaskStartDateDisplayforstatus, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectTask.ActualTaskStartDateDisplayforstatus, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectTask.ActualTaskStartDateDisplayforstatus, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectTask.ActualTaskEndDateDisplayforstatus, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectTask.ActualTaskEndDateDisplayforstatus, new { htmlAttributes = new { @class = "form-control", onchange = "" } })
                                @Html.ValidationMessageFor(model => model.ProjectTask.ActualTaskEndDateDisplayforstatus, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @*<div class="form-group">
            @Html.LabelFor(model => model.ProjectTask.ExpectedTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjectTask.ExpectedTimeForStatus, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProjectTask.ExpectedTimeForStatus, "", new { @class = "text-danger" })
            </div>
        </div>*@

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectTask.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectTask.Comment, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectTask.Comment, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">Attchments</label>
                            <div class="col-md-10">
                                <div class='col-md-12' id='my-dropzoneUp'>
                                    <div class='col-md-12'>
                                        <div class='dropzone' id='my-dropzone' name='mainFileUploader'>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-10">
                                @Html.Label("*When you upload the multiple Url at a time you need to separate all url using by ';' ", htmlAttributes: new { @class = "control-label col-md-10" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectTask.URL, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectTask.URLForStatus, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectTask.URLForStatus, "", new { @class = "text-danger" })
                            </div>
                        </div>




                    </div>

                    }

                </div>

                <div class="modal-footer">
                    <input type="button" id="btnStatusUpdate" class="btn btn-default" value="Submit">

                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>

    </div>
    <div class="form-horizontal col-md-12">
        <div class="alert alert-success alert-dismissible" role="alert" id="divTaskSaveSuccess" style="display:none;">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            Data Saved Successfully.
        </div>
    </div>
    <div class="form-horizontal col-md-12">
        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsgTask" name="ErrorMsgTask" style="display:none">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <span id="errormsgforTask"></span>
        </div>
    </div>

    <div class="modal fade" @*id="myModal2"*@ id="publishedModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog-big" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel2"></h4>
                </div>

                <div class="modal-body" id="previewSection">


                </div>

            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->
    @* Modal for Upload Template*@
    <div id="myModalTemplateUpload" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h5 class="modal-title">Upload File for Create New Project Task</h5>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Upload file</label>
                        </div>
                        <div class="col-md-8">
                            <input type="file" name="NewtaskUpload" class="form-control" id="NewtaskUpload" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">

                        </div>
                        <div class="col-md-8">
                            <label style="color:red">*File extension should be .xlsx<br />*Column sequence should not be changed<br />*When you assigne the multiple user at a time you need to separate all user using by ';'</label>
                            <label style="color:red">*Project Name,Task Name,Task Code,start Date,End Date,Assigned to,Percentage Complete feild are mandatory <br />*IsActive,IsValueAdded and IsMilestone format are 'true'/'false' <br />Expected Time format like '10.30'</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-default" id="viewfileL1" value="Upload" onclick="UploadExcelForTask()" data-dismiss="modal" />
                    <button type="button" class="btn btn-default" data-dismiss="modal" id="btnCloseModalL1">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">



        //Download Excel
        function downloadExcelFile() {
        try {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("GenerateExcelForProjectTask", "Admin")',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                }),
                success: function (response) {
                    window.location = '/Admin/DownloadExcelTemplateForTask?fileid=' + response
                }
            })
        }
        catch (e) {
            alert(e);
        }
    }

        //End

              //Upload Excel Template 
        function UploadExcelForTask() {
            try {
               
                var formData = new FormData();
                var totalFiles = document.getElementById("NewtaskUpload").files.length;
                for (var i = 0; i < totalFiles; i++) {
                    var file = document.getElementById("NewtaskUpload").files[i];
                   
                    formData.append("FileUpload", file);
                }
             
                $.ajax({
                    url: '@Url.Action("UploadExcelForCreateNewProjectTask", "Admin")',
                    type: 'POST',
                    beforeSend: function () {
                        $('#spinner').show();
                    },
                    data: formData,
                    async: false,
                    cache: false,
                    contentType: false,
                    enctype: 'multipart/form-data',
                    processData: false,
                    success: function (response) {
                        if (response == "Success") {
                            response = null;
                          
                            location.reload();


                        } else {
                        }

                    },
                    error: function (response) {



                    }
                })
            }
            catch (e) {
                alert(e);
            }
        } 

        //End upload


        //Show mpdal
        function ShowPopupforTemplateUpload() {
            
            $('#myModalTemplateUpload').modal('show');
        }


    </script>

    <script type="text/javascript">
        function AddNewProjectTask() {
            clearAllTaskControls();
            $('#hProjectNameHeader').html("Create New Project Task");
            $('#mymodalForNewTask').modal('show');
        }


        function ShowPopupforPreview(TaskID)
        {
            $.ajax({
                url: '@Url.Action("previewProjectTask", "Admin")',
                type: "POST",
                dataType: "html",
                contentType: "application/json; charset=utf-8",
                //data: { s_People_ID: People_ID },
                data: JSON.stringify({
                    "TaskID": TaskID
                }),
                success: function (response) {
                    $('#publishedModal').modal('show');
                    $('#previewSection').html(response);
                },
                error: function (response) {
                    console.log(response);
                }
            });
        }

         function ShowPopupforChangeStatus(Taskid, StatusID,Taskcode,Taskname) {
             $('#ProjectTask_TaskCodeforChangeStatus').val(Taskid);

            document.getElementById("ErrorMsgTaskpopup").innerHTML = "";
            document.getElementById("ErrorMsgTaskpopup").style.display = 'none';
            $.ajax({
                    url: '@Url.Action("LoadProjectTaskStatus", "Admin")',
                    type: 'POST',
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",

                data: JSON.stringify({
                    "Taskid":Taskid
                }),
                success: function (result) {
                    var str = result.split("|");                    
                    var TaskObj = JSON.parse(str[1]);                    
                    $('#ProjectTask_TaskIdforstatus').val(Taskid);
                     $("#ddlTaskStatusChange").html("");
                    $("#ddlTaskStatusChange").append(str[0]);
                     $('#ddlTaskStatusChange').val(StatusID);
                     $('#ProjectTask_TaskCodeforChangeStatus').val(Taskcode);
                    $('#ProjectTask_TaskNameforChangeStatus').val(Taskname);
                    $('#ProjectTask_ActualTaskStartDateDisplayforstatus').val('');
                    $('#ProjectTask_ActualTaskEndDateDisplayforstatus').val('');
                   // $('#ProjectTask_ActualTaskStartDateDisplayforstatus').val(TaskObj.ActualTaskStartDateDisplayforstatus);
                  //  $('#ProjectTask_ActualTaskEndDateDisplayforstatus').val(TaskObj.ActualTaskStartDateDisplayforstatus);
                    //
                    $("#ProjectTask_ActualTaskEndDateDisplayforstatus").removeAttr('disabled');
                    $("#ProjectTask_ActualTaskStartDateDisplayforstatus").attr("disabled", "disabled");
                    if (TaskObj.ActualTaskStartDate != null) {
                        $('#ProjectTask_ActualTaskStartDateDisplayforstatus').val(formatDateInMM_DD_YYYY(TaskObj.ActualTaskStartDate));
                    }
                    if (TaskObj.ActualTaskEndDate != null) {
                        $('#ProjectTask_ActualTaskEndDateDisplayforstatus').val(formatDateInMM_DD_YYYY(TaskObj.ActualTaskEndDate));
                    }

                    $('#mymodal').modal('show');

                    var TaskStatus = $("#ddlTaskStatusChange option:selected").text();
                    
                    $('#ddlTaskStatusChange').change(function () {
                        var ChangedStatus = $("#ddlTaskStatusChange option:selected").text();
                        var systemDATE = new Date();
                        var dd = String(systemDATE.getDate()).padStart(2, '0');
                        var mm = String(systemDATE.getMonth() + 1).padStart(2, '0'); //January is 0!
                        var yyyy = systemDATE.getFullYear();
                        systemDATE = mm + '/' + dd + '/' + yyyy;
                    
                        if (TaskStatus == "Open" || TaskStatus == "OPEN") {

                            $('#ProjectTask_ActualTaskStartDateDisplayforstatus').val(systemDATE)
                          

                        }
                        if (ChangedStatus == "Closed" || ChangedStatus == "CLOSED") {

                            $('#ProjectTask_ActualTaskEndDateDisplayforstatus').val(systemDATE)
                            $("#ProjectTask_ActualTaskEndDateDisplayforstatus").attr("disabled", "disabled");

                        }
                        else {
                            $("#ProjectTask_ActualTaskEndDateDisplayforstatus").removeAttr('disabled');
                        }

                    });
                    //




                   // $('#ProjectTask_ExpectedTimeForStatus').val(TaskObj.ExpectedTime);

                 },
                 error: function () {

                 },
                });

        }
        $("#tblGridListViewPost").dataTable();

        $("#tblGridListViewPost1").dataTable();

        $("#ProjectTask_TaskStartDateDisplay").datepicker({

            changeMonth: true,
            changeYear: true

        });

        $('#ProjectTask_ActualTaskStartDateDisplayforstatus').datepicker({
            changeMonth: true,
            changeYear: true


        });
        $('#ProjectTask_ActualTaskEndDateDisplayforstatus').datepicker({
            changeMonth: true,
            changeYear: true


        });
        $("#ProjectTask_ActualTaskStartDateDisplay").datepicker({

            changeMonth: true,
            changeYear: true

        });
        $("#ProjectTask_TaskEndDateDisplay").datepicker({

            changeMonth: true,
            changeYear: true

        });

        $("#ProjectTask_ActualTaskEndDateDisplay").datepicker({

            changeMonth: true,
            changeYear: true

        });

        function GetAssigneUserDetlByProject() {

            var ProjectId = $('#ActiveProjectList').val();

              $("#ddlUsersAssigned").multiselect('destroy');

            $.ajax({
                url: '@Url.Action("ManageProjectTask", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ "ProjectId": ProjectId }),
                    success: function (response) {

                        var obj = JSON.parse(response);

                        if (obj.PercentageComplete.length > 0) {
                            var percentageArray = obj.PercentageComplete;
                            $("#ddlPercentage").html('');
                            for (var i = 0; i < percentageArray.length; i++) {

                                $("#ddlPercentage").append($("<option></option>").val(percentageArray[i]).html(percentageArray[i]));
                            }
                        }
                        $("#ddlTaskStatus").html('')
                        //$("#ddlTaskStatus").append($("<option></option>").val(0).html('Select status'));
                        if (obj.StatusList.length > 0) {
                            var statusList = obj.StatusList;
                            for (var i = 0; i < statusList.length; i++) {

                                $("#ddlTaskStatus").append($("<option></option>").val(statusList[i].StatusID).html(statusList[i].StatusName));
                            }
                        }
                        if (obj.TaskList.length > 0) {
                            var tasklist1 = obj.TaskList;

                            $('#ProjectTypeList').val(tasklist1[0].ProjectTypeID);

                        }

                        $("#ddlParentTask").html('')



                       /* if ($.fn.DataTable.isDataTable('#tblTasklist')) {
                            $('#tblTasklist').DataTable().destroy();
                        }*/

                      //  $('#tblTasklist tbody').html('');

                        $("#ddlParentTask").append($("<option></option>").val(0).html('Select Task'));

                        if (obj.TaskList.length > 0) {
                            $('#ddlParentTask').attr("disabled", false);
                            //var taskList = obj.TaskList;
                           
                           /* for (var i = 0; i < taskList.length; i++) {
                                var taskActualStartValue = (taskList[i].ActualTaskStartDate == null) ? "" : formatDateInMM_DD_YYYY((taskList[i].ActualTaskStartDate));
                                var taskActualEndValue = (taskList[i].ActualTaskEndDate == null) ? "" : formatDateInMM_DD_YYYY((taskList[i].ActualTaskEndDate));
                                var activeStatus = (taskList[i].IsActive == true) ? 'Active' : 'In Active';

                                var isMilestone;
                                if (taskList[i].IsMilestone != null) {
                                    isMilestone = (taskList[i].IsMilestone == true) ? 'Yes' : 'No';
                                }
                                else {
                                    isMilestone = "";
                                }

                                //var userListHTML = "<tr><td class='text-center'>" + taskList[i].TaskId + "</td> <td class='text-center'>" + taskList[i].TaskName + "</td> <td class='text-center'>" + taskList[i].TaskCode + "</td> <td class='text-center'>" + taskList[i].ParentTaskName + "</td> <td class='text-center'>" + taskList[i].ProjectName + "</td> <td class='text-center'>" +
                                //    formatDateInMM_DD_YYYY(new Date(taskList[i].TaskStartDate))
                                //    + "</td> <td class='text-center'>" + formatDateInMM_DD_YYYY(new Date(taskList[i].TaskEndDate)) + "</td><td class='text-center'>" + taskActualStartValue + "</td><td class='text-center'>" + taskActualEndValue +
                                //    "</td> <td class='text-center'>" + taskList[i].TaskStatusName + "</td><td class='text-center'>" + activeStatus + "</td><td class='text-center'>" + taskList[i].CompletePercent +"</td><td class='text-center'>"      + isMilestone +
                                //    "</td><td class='text-center'><a href='javascript:void(0);' id='projectTaskEdit' onclick='EditProjectTask(" + taskList[i].TaskId + ")'>Edit</a></td>"

                                //$('#tblTasklist tbody').append(userListHTML);

                                $("#ddlParentTask").append($("<option></option>").val(taskList[i].TaskId).html(taskList[i].TaskName));
                            }*/
                        }
                        else {
                           // $('#tblTasklist tbody').html('');
                            $('#ddlParentTask').attr("disabled", "disabled");

                        }
                        ///Malabika start
                        $("#ddlParentTask").change(function () {
                            var SelectTaskId = $('#ddlParentTask').val();
                            var taskList1 = obj.TaskList;

                            for (var i = 0; i < taskList1.length; i++) {
                                var ParentTaskID = taskList1[i].ParentTaskId;
                                if (SelectTaskId == ParentTaskID) {

                                    $.ajax({
                                        url: '@Url.Action("GetProjectTaskByID", "Admin")',
                                        type: "POST",
                                        dataType: "json",
                                        contentType: "application/json; charset=utf-8",
                                        data: JSON.stringify({
                                            "taskId": SelectTaskId
                                        }),
                                        success: function (response) {

                                            var taskObj = JSON.parse(response);

                                            $('#ddlUsersAssigned').multiselect('deselectAll', false);
                                            $('#ddlUsersAssigned').multiselect('updateButtonText');
                                            $("#ddlUsersAssigned").html('')
                                            $('#ddlUsersAssigned').multiselect('rebuild');
                                            var userIds = taskObj.UserIdsTaskAssigned;
                                            var selectedOptions = taskObj.UserIdsTaskAssigned.split(',');
                                            var SelectedName = taskObj.UserNameTaskAssigned.split(',');
                                            for (i = 0; i < selectedOptions.length; i++) {

                                                $("#ddlUsersAssigned").append($("<option></option>").val(selectedOptions[i]).html(SelectedName[i]));
                                                $('#ddlUsersAssigned').multiselect('rebuild');
                                                $('#ddlUsersAssigned').multiselect('select', [selectedOptions[i]]);
                                            }

                                            $("#ddlUsersAssigned").multiselect({
                                                enableCaseInsensitiveFiltering: true,
                                                buttonWidth: 550,
                                                enableFiltering: true
                                            });
                                            $('#UserIdsInString').val(userIds);

                                        },
                                        error: function (response) {
                                            alert('error occured')
                                            // console.log(response);
                                        }
                                    });

                                }
                                else {
                                    $("#ddlUsersAssigned").html('')
                                    $('#ddlUsersAssigned').multiselect('rebuild');
                                    var UserList2 = obj.UserList;

                                    for (var k = 0; k < UserList2.length; k++) {

                                        $("#ddlUsersAssigned").append($("<option></option>").val(UserList2[k].ID).html(UserList2[k].Name));
                                        $('#ddlUsersAssigned').multiselect('rebuild');
                                    }

                                }

                            }

                        });
                        //Malabika End
                        $("#ddlUsersAssigned").html('')

                        if (obj.UserList.length > 0) {

                            var UserList = obj.UserList;

                            for (var i = 0; i < UserList.length; i++) {

                                $("#ddlUsersAssigned").append($("<option></option>").val(UserList[i].ID).html(UserList[i].Name));
                            }


                            //$("#ddlUsersAssigned").multiselect('refresh');
                            $("#ddlUsersAssigned").multiselect({
                                enableCaseInsensitiveFiltering: true,
                                buttonWidth: 550,
                                enableFiltering: true
                               });

                        }
                        else {

                            $("#ddlUsersAssigned").multiselect({
                                enableCaseInsensitiveFiltering: true,
                                buttonWidth: 550,
                                enableFiltering: true
                            });

                        }



                    },
                    error: function (response) {
                        console.log(response);
                    }
            });



        };

        $('#ddlUsersAssigned').change(function () {


            var userIds = $("#ddlUsersAssigned option:selected").map(function () { return this.value }).get().join(",");

            $('#UserIdsInString').val(userIds);
            console.log(userIds);

        });

        $('#btnProjectTaskSave').click(function () {

            var taskID = $('#ProjectTask_TaskId').val();
            var projectID = $('#ActiveProjectList').val();
            var taskName = $('#ProjectTask_TaskName').val();
            var taskCode = $('#ProjectTask_TaskCode').val();
            var parentTaskId = $('#ddlParentTask').val();

            var startDate = $('#ProjectTask_TaskStartDateDisplay').val();
            var endDate = $('#ProjectTask_TaskEndDateDisplay').val();

            var expectedTime = $('#ProjectTask_ExpectedTime').val();

            var actualStartDate =$('#ProjectTask_ActualTaskStartDateDisplay').val();
            var actualEndDate = $('#ProjectTask_ActualTaskEndDateDisplay').val();

            var completePercent = $('#ddlPercentage').val();
            var taskStatusId = $('#ddlTaskStatus').val();
            var IsActive = $('#ProjectTask_IsActive').is(':checked');
            var IsValueAdded = $('#ProjectTask_IsValueAdded').is(':checked');

            var IsMilestone = $('#ProjectTask_IsMilestone').is(':checked');
            var userIds = $('#UserIdsInString').val();

            var DirectoryName = $("#FileDirectory").val();
          
            var URL = $("#ProjectTask_URL").val();

            var validationStatus = ProjectTask_validateTaskSave()

            if (validationStatus != true)
                return false;

            var userIds = $('#UserIdsInString').val();
           if (userIds == "") {
               ProjectTask_ShowTaskErrorMessage('Please select a user to assign task')
               $('#ddlUsersAssigned').focus();
                return false;
            } else {
                ProjectTask_HideTaskErrorMessage();
            }
            var data = {
                "TaskId": taskID,
                "ProjectID": projectID,
                "TaskName": taskName,
                "TaskCode": taskCode,
                "ParentTaskId": parentTaskId,
                "TaskStartDateDisplay": startDate,
                "TaskEndDateDisplay": endDate,
                "ActualTaskStartDateDisplay": actualStartDate,
                "ActualTaskEndDateDisplay": actualEndDate,
                "ExpectedTime":expectedTime,
                "CompletePercent": completePercent,
                "IsActive": IsActive,
                "IsMilestone": IsMilestone,
                "TaskStatusID": taskStatusId,
                "UserIdsTaskAssigned": userIds,
                "IsValueAdded": IsValueAdded,
                "DirectoryName": DirectoryName,
                "URL":URL
            };

            $.ajax({
                url: '@Url.Action("SaveProjectTask", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(data),
                success: function (response) {
                    if (response == "Success") {

                       // $('#divTaskSaveSuccess').css('display', 'block');
                        response = null;
                        clearAllTaskControls();
                        window.location.reload();
                        //var projectName = $('#SelectedProjectName').val();
                       // ShowTaskPopup(projectID, projectName);
                    } else {

                        ProjectTask_ShowTaskErrorMessage('Error occured.')
                        $('#divTaskSaveSuccess').css('display', 'none');

                    }

                    },
                error: function (response) {

                    ProjectTask_ShowTaskErrorMessage('Error occured.')

                    }
            });

           // alert('task save');
        })


        function EditProjectTask(taskID) {

            if ($("#ddlParentTask option").length <= 2) {
                $("#ddlParentTask option").attr("disabled", "disabled");
            } else {
                $("#ddlParentTask option").each(function (i) {

                    if ($(this).val() == taskID) {
                        $(this).attr("disabled", "disabled");
                    }
                    else {
                        $(this).attr("disabled", false);
                    }
                })
            }

            var position = $('#divForm').position();

             $.ajax({
                url: '@Url.Action("GetProjectTaskByID", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    "taskId": taskID
                }),
                 success: function (response) {

                     var taskObj = JSON.parse(response);
                     var project_id = taskObj.ProjectID;
                     $('#hProjectNameHeader').html("Task " + taskObj.TaskId + " details");
                     AjaxCallGetUserByProject(project_id, taskObj.TaskStatusID, taskObj.CompletePercent, taskObj.UserIdsTaskAssigned);
                     //**Get user by project
                     $('#ProjectTask_TaskId').val(taskObj.TaskId)
                     $('#ProjectTask_TaskName').val(taskObj.TaskName);
                     $('#ProjectTask_TaskCode').val(taskObj.TaskCode);
                     $("#ProjectTask_ExpectedTime").val(taskObj.ExpectedTime);

                     $('#ddlParentTask').val(taskObj.ParentTaskId)

                     $('#ProjectTask_TaskStartDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.TaskStartDate));
                     $('#ProjectTask_TaskEndDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.TaskEndDate));

                     if (taskObj.IsMilestone == null) {
                         $('#ProjectTask_IsMilestone').prop('checked', false);
                     }
                     else {
                         $('#ProjectTask_IsMilestone').prop('checked', taskObj.IsMilestone);
                     }



                 //    $('#ddlPercentage').val(taskObj.CompletePercent);


                     if (taskObj.ActualTaskStartDate != null) {
                         $('#ProjectTask_ActualTaskStartDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.ActualTaskStartDate));
                     }
                     else {
                         $('#ProjectTask_ActualTaskStartDateDisplay').val('');
                     }
                     if (taskObj.ActualTaskEndDate != null) {
                         $('#ProjectTask_ActualTaskEndDateDisplay').val(formatDateInMM_DD_YYYY(taskObj.ActualTaskEndDate));
                     }
                     else {
                         $('#ProjectTask_ActualTaskEndDateDisplay').val('');
                     }
                   //  $('#ddlTaskStatus').val(taskObj.TaskStatusID);
                     $('#ProjectTask_IsActive').prop('checked', taskObj.IsActive);
                     $('#ProjectTask_IsValueAdded').prop('checked', taskObj.IsValueAdded);
                    // $('#ProjectTask_UserIdsTaskAssigned').val(taskObj.UserIdsTaskAssigned);


                  //   $('#ddlUsersAssigned').multiselect('deselectAll', false);
                   //  $('#ddlUsersAssigned').multiselect('updateButtonText');



                     //var userIds = taskObj.UserIdsTaskAssigned;
                     //var selectedOptions = taskObj.UserIdsTaskAssigned.split(',');
                     //for (i = 0; i < selectedOptions.length; i++) {

                     //    $('#ddlUsersAssigned').multiselect('select', [selectedOptions[i]]);
                     //}

                     //$('#UserIdsInString').val(userIds);

                     //$('#ddlTaskStatus').val(taskObj.TaskStatusID);
                     setTimeout(function () {
                         $('#ddlUsersAssigned').multiselect('deselectAll', false);
                        // $('#ddlUsersAssigned').multiselect('updateButtonText');
                         $('#mymodalForNewTask').modal('show');
                     }, 5000);

                },
                error: function (response) {
                    alert('error occured')
                   // console.log(response);
                }
            });


        }

        function clearAllTaskControls() {
            $('#ActiveProjectList').prop('selectedIndex', 0);
            $('#ProjectTypeList').prop('selectedIndex', 0);
            $('#ProjectTask_TaskId').val('');
            $('#ProjectTask_TaskName').val('');
            $('#ProjectTask_TaskCode').val('');
            $('#ProjectTask_TaskStartDateDisplay').val('');
            $('#ProjectTask_TaskEndDateDisplay').val('');
            $('#ProjectTask_ActualTaskStartDateDisplay').val('');
            $('#ProjectTask_ActualTaskEndDateDisplay').val('');
            $('#ddlUsersAssigned').val(0);
            $('#ddlUsersAssigned').multiselect('deselectAll', false);
            $('#ddlUsersAssigned').multiselect('updateButtonText');
            $('#UserIdsInString').val('');
            $('#ddlParentTask').val(0);
            $('#ddlPercentage').val(0);
            $('#ddlTaskStatus').val(0);
            $('#ProjectTask_IsActive').val(false);
            $('#ProjectTask_IsActive').prop("checked", false);

            $('#ProjectTask_IsValueAdded').val(false);
            $('#ProjectTask_IsValueAdded').prop("checked", false);
            $('#ProjectTask_IsMilestone').val(false);
            $('#ProjectTask_IsMilestone').prop("checked", false);
        }

        function ProjectTask_validateTaskSave() {
            var projectID = $('#ActiveProjectList').val();
            var taskName = $('#ProjectTask_TaskName').val();
            var taskCode = $('#ProjectTask_TaskCode').val();
            var startDate = $('#ProjectTask_TaskStartDateDisplay').val();
            var endDate = $('#ProjectTask_TaskEndDateDisplay').val();

            var actualStartDate = $('#ProjectTask_ActualTaskStartDateDisplay').val();
            var actualEndDate = $('#ProjectTask_ActualTaskEndDateDisplay').val();
            var taskStatus = $('#ddlTaskStatus').val();
            //

            if (projectID == "") {
                ProjectTask_ShowTaskErrorMessage('Project is required..')
                $('#ActiveProjectList').focus();
                return false;
            }
            else {
                ProjectTask_HideTaskErrorMessage();
            }
            if (taskName == "") {
                ProjectTask_ShowTaskErrorMessage('Task name is required..')
                $('#ProjectTask_TaskName').focus();
                return false;
            }
            else {
                ProjectTask_HideTaskErrorMessage();
            }
            if (taskCode == "") {
                ProjectTask_ShowTaskErrorMessage('Task code is required..')
                $('#ProjectTask_TaskCode').focus();
                return false;
            } else {
                ProjectTask_HideTaskErrorMessage();
            }

            if (startDate == "") {
                ProjectTask_ShowTaskErrorMessage('Start date is required..')
                $('#ProjectTask_TaskStartDateDisplay').focus();
                return false;
            } else {

                if (!ProjectTask_validateDate(startDate)) {
                    ProjectTask_ShowTaskErrorMessage('Invalid start date..')

                    return false;
                }
                else {
                    ProjectTask_HideTaskErrorMessage();
                }

            }
            if (endDate == "") {
                ProjectTask_ShowTaskErrorMessage('End date is required..')
                $('#ProjectTask_TaskEndDateDisplay').focus();
                return false;
            } else {

                if (!ProjectTask_validateDate(endDate)) {
                    ProjectTask_ShowTaskErrorMessage('Invalid end date..')
                    return false;
                }
                else {

                    var startmonthfield = startDate.split("/")[0]
                    var startdayfield = startDate.split("/")[1]
                    var startyearfield = startDate.split("/")[2]
                    var start = new Date(startyearfield, startmonthfield - 1, startdayfield)

                    var endmonthfield = endDate.split("/")[0]
                    var enddayfield = endDate.split("/")[1]
                    var endyearfield = endDate.split("/")[2]
                    var end = new Date(endyearfield, endmonthfield - 1, enddayfield)

                    if (start > end) {
                        ProjectTask_ShowTaskErrorMessage('End time can not be less than start time..')
                        return false;
                    }
                    else {
                        ProjectTask_HideTaskErrorMessage();
                    }

                }
            }



            if (actualStartDate != "") {
                if (!ProjectTask_validateDate(actualStartDate)) {
                    ProjectTask_ShowTaskErrorMessage('Invalid Actual start date..')
                    return false;
                }
                else {
                    ProjectTask_HideTaskErrorMessage();
                }

            }

            if (actualEndDate != "") {
                if (!ProjectTask_validateDate(actualEndDate)) {
                    ProjectTask_ShowTaskErrorMessage('Invalid Actual end date..')
                    return false;
                }
                else {

                    var startmonthfield = startDate.split("/")[0]
                    var startdayfield = startDate.split("/")[1]
                    var startyearfield = startDate.split("/")[2]
                    var start = new Date(startyearfield, startmonthfield - 1, startdayfield)

                    var actualStartmonthfield = actualStartDate.split("/")[0]
                    var actualStartdayfield = actualStartDate.split("/")[1]
                    var actualStartyearfield = actualStartDate.split("/")[2]
                    var actualStart = new Date(actualStartyearfield, actualStartmonthfield - 1, actualStartdayfield)

                    var actualEndmonthfield = actualEndDate.split("/")[0]
                    var actualEnddayfield = actualEndDate.split("/")[1]
                    var actualEndyearfield = actualEndDate.split("/")[2]
                    var actualEnd = new Date(actualEndyearfield, actualEndmonthfield - 1, actualEnddayfield)

                    if (actualStart > actualEnd || start > actualEnd) {
                        ProjectTask_ShowTaskErrorMessage('Actual end time can not be less than actual start time/Start time..')
                        return false;
                    }
                    else {
                        ProjectTask_HideTaskErrorMessage();
                    }

                }

            }


            if (taskStatus == 0) {
                ProjectTask_ShowTaskErrorMessage('Please select task status')
                return false;
            } else {
                ProjectTask_HideTaskErrorMessage();
            }
            return true;
        }
        function ProjectTask_HideTaskErrorMessage() {
            $('#errormsgforTask').text('');
            $('#ErrorMsgTask').css('display', 'none');
        }
        function ProjectTask_ShowTaskErrorMessage(message) {
            $('#errormsgforTask').append(message);
            $('#ErrorMsgTask').css('display', 'block');
        }
        function formatDateInMM_DD_YYYY(yourUnformattedDate) {
            var formattedDate = new Date(yourUnformattedDate);
            var day = formattedDate.getDate();
            var month = formattedDate.getMonth();
            month += 1;  // JavaScript months are 0-11
            var year = formattedDate.getFullYear();
            if (day < 10) {
                day = "0" + day;
            }
            if (month < 10) {
                month = "0" + month;
            }
            // return (day + "/" + month + "/" + year);
            return (month + "/" + day + "/" + year);

        }
        function ProjectTask_validateDate(date) {

            var validformat = /^\d{2}\/\d{2}\/\d{4}$/ //Basic check for format validity
            var returnval = false
            if (!validformat.test(date)) {

                returnval = false;
            }
            else { //Detailed check for valid date ranges
                var monthfield = date.split("/")[0]
                var dayfield = date.split("/")[1]
                var yearfield = date.split("/")[2]
                var dayobj = new Date(yearfield, monthfield - 1, dayfield)
                if ((dayobj.getMonth() + 1 != monthfield) ||
                    (dayobj.getDate() != dayfield) || (dayobj.getFullYear() != yearfield))

                    returnval = false;
                else
                    returnval = true
            }

            return returnval
        }


          //Project Task Edit Start**
        function AjaxCallGetUserByProject(project_id, statusid, CompletePercent, UserIdAssigned) {

                           $.ajax({
                              url: '@Url.Action("ManageProjectTask", "Admin")',
                              type: "POST",
                              dataType: "json",
                              contentType: "application/json; charset=utf-8",
                              data: JSON.stringify({ "ProjectId": project_id }),
                              success: function (response) {

                                  var obj1 = JSON.parse(response);

                                             $('#ActiveProjectList').val(project_id);
                                            if (obj1.PercentageComplete.length > 0) {
                                                var percentageArray = obj1.PercentageComplete;
                                                $("#ddlPercentage").html('');
                                                for (var i = 0; i < percentageArray.length; i++) {

                                                $("#ddlPercentage").append($("<option></option>").val(percentageArray[i]).html(percentageArray[i]));
                                                }
                                          }
                                           $('#ddlPercentage').val(CompletePercent);
                                            $("#ddlTaskStatus").html('')
                                             if (obj1.StatusList.length > 0) {

                                                 var statusList = obj1.StatusList;

                                                 for (var i = 0; i < statusList.length; i++) {

                                                    $("#ddlTaskStatus").append($("<option></option>").val(statusList[i].StatusID).html(statusList[i].StatusName));
                                                }
                                             }

                                            $('#ddlTaskStatus').val(statusid);
                                            if (obj1.TaskList.length > 0) {
                                                var tasklist = obj1.TaskList;
                                                $('#ProjectTypeList').val(tasklist[0].ProjectTypeID);
                                            }

                                             $("#ddlUsersAssigned").html('')

                                            if (obj1.UserList.length > 0) {
                                                var UserList = obj1.UserList;
                                                for (var i = 0; i < UserList.length; i++) {

                                                    $("#ddlUsersAssigned").append($("<option></option>").val(UserList[i].ID).html(UserList[i].Name));

                                                }


                                                $("#ddlUsersAssigned").multiselect({
                                                    enableCaseInsensitiveFiltering: true,
                                                    buttonWidth: 550,
                                                    enableFiltering: true
                                                });

                                            }
                                            else {

                                                $("#ddlUsersAssigned").multiselect({
                                                    enableCaseInsensitiveFiltering: true,
                                                    buttonWidth: 550,
                                                    enableFiltering: true
                                                });

                                            }


                                  var userIds = UserIdAssigned;

                                  var selectedOptions = UserIdAssigned.split(',');
                                  for (i = 0; i < selectedOptions.length; i++) {

                                      $('#ddlUsersAssigned').multiselect('select', [selectedOptions[i]]);
                                   }

                                  $('#UserIdsInString').val(userIds);


                                        },
                                        error: function (response) {
                                            alert('error occured')
                                            // console.log(response);
                                        }
                                    });
        }

              //Task Status Update
        $('#btnStatusUpdate').click(function () {
            var TaskID = $('#ProjectTask_TaskIdforstatus').val();            
            var actualStartDate = $('#ProjectTask_ActualTaskStartDateDisplayforstatus').val();
            var actualEndDate = $('#ProjectTask_ActualTaskEndDateDisplayforstatus').val();
           // var expectedTime = $('#ProjectTask_ExpectedTimeForStatus').val();            
            var TaskStatusId = $('#ddlTaskStatusChange').val();
            var taskStatusName = $("#ddlTaskStatusChange option:selected").text();
            var Comment = $('#ProjectTask_Comment').val();
            var url = $('#ProjectTask_URLForStatus').val();
            var directoryName = $("#FileDirectoryForChangeStatus").val();
            //  var Timespent = $('#ProjectIssue_Timespent').val();

            if (TaskStatusId <= 0) {
                document.getElementById("ErrorMsgTaskpopup").innerHTML = "Please select Status ";
                document.getElementById("ErrorMsgTaskpopup").style.display = 'block';
                $('#ddlTaskStatusChange').focus();
                return false;
            }
            if (actualStartDate == "" && taskStatusName == "Closed") {
                document.getElementById("ErrorMsgTaskpopup").innerHTML = "Actual start date required..";
                document.getElementById("ErrorMsgTaskpopup").style.display = 'block';
                $('#ProjectTask_ActualTaskStartDateDisplayforstatus').focus();
                return false;
            }
            if (actualEndDate == "" && taskStatusName == "Closed") {
                document.getElementById("ErrorMsgTaskpopup").innerHTML = "Actual end date required..";
                document.getElementById("ErrorMsgTaskpopup").style.display = 'block';
                $('#ProjectTask_ActualTaskEndDateDisplayforstatus').focus();
                return false;

            }
            //if (expectedTime == "") {
            //    document.getElementById("ErrorMsgTaskpopup").innerHTML = "Expected time required..";
            //    document.getElementById("ErrorMsgTaskpopup").style.display = 'block';
            //    $('#ProjectTask_ExpectedTime').focus();
            //    return false;
            //}



           // var hms = Timespent;   // your input string
          //  var a = hms.split(':'); // split it at the colons

          //  Timespent = a[0] + '.' + a[1];
             var data = {
                "TaskIdforstatus":TaskID,
                "ActualTaskStartDateDisplayforstatus": actualStartDate,
                "ActualTaskEndDateDisplayforstatus": actualEndDate,
                 "TaskStatusID": TaskStatusId,
                 "Comment": Comment,
                // "ExpectedTime":expectedTime,
                 "URL": url,
                 "DirectoryName": directoryName
            };

            $.ajax({
                url: '@Url.Action("UpdateStatusTask", "Admin")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(data),
                success: function (response) {
                    if (response == "Success") {
                        response = null;
                        window.location.reload();
                        //activaTab();
                    }

                    },
                error: function (response) {


                    }
            });
        });

        var DirectoryName = "";
        if (document.getElementById("FileDirectory").value != "") {
            DirectoryName = document.getElementById("FileDirectory").value;
        } else {
            DirectoryName = "";
        }

        Dropzone.options.myDropzone = {
            url: "/Admin/ProjectTaskAttachments",
            autoProcessQueue: true,
            uploadMultiple: true,
            parallelUploads: 100,
            maxFiles: 100,
            acceptedFiles: "image/*,.pdf,.doc,.docx,.xlsx,.xls",
            async: true,

            init: function () {


                this.on("sending", function (file, xhr, formData) {
                    formData.append("DirectoryName", $("#FileDirectory").val());


                });

                //var submitButton = document.querySelector("input[name ='Command']");
                var wrapperThis = this;
                wrapperThis.processQueue();
                $("#dropzoneJsForm").submit();
                //submitButton.addEventListener("click", function (event) {
                //    $(".overlay").show();
                //    event.preventDefault(event);
                //    wrapperThis.processQueue();

                //    setTimeout(function () {
                //        $("#dropzoneJsForm").submit();
                //    }, 6000);


                //    return false;
                //});


                this.on("addedfile", function (file) {
                    document.getElementById("btnProjectTaskSave").disabled = true;
                    // Create the remove button
                    var removeButton = Dropzone.createElement("<button class='btn btn-lg dark'>Remove File</button>");

                    // Listen to the click event
                    removeButton.addEventListener("click", function (e) {
                        // Make sure the button click doesn't submit the form:
                        //e.defaultPrevented();
                        //e.stopPropagation();

                        // Remove the file preview.
                        wrapperThis.removeFile(file);
                        // If you want to the delete the file on the server as well,
                        // you can do the AJAX request here.
                    });

                    // Add the button to the file preview element.
                    file.previewElement.appendChild(removeButton);
                });

                //this.on('sendingmultiple', function (data, xhr, formData) {
                //    formData.append("TravelRequestID", $("#TravelRequestID").val());
                //});
                this.on("success", function (file, response) {
                    //alert(file);
                    // or however you would point to your assigned file ID here;
                    //alert(JSON.stringify(response));
                    document.getElementById("FileDirectory").value = JSON.stringify(response);
                    document.getElementById("btnProjectTaskSave").disabled = false;
                    // console should show the ID you pointed to
                    // do stuff with file.id ...
                });
            }

        };

        var DirectoryName = "";
        if (document.getElementById("FileDirectoryForChangeStatus").value != "") {
            DirectoryName = document.getElementById("FileDirectoryForChangeStatus").value;
        } else {
            DirectoryName = "";
        }

         Dropzone.options.myDropzone = {
            url: "/Admin/ProjectTaskAttachments",
            autoProcessQueue: true,
            uploadMultiple: true,
            parallelUploads: 100,
            maxFiles: 100,
            acceptedFiles: "image/*,.pdf,.doc,.docx,.xlsx,.xls",
            async: true,

            init: function () {


                this.on("sending", function (file, xhr, formData) {
                    formData.append("FileDirectoryForChangeStatus", $("#FileDirectoryForChangeStatus").val());


                });

                //var submitButton = document.querySelector("input[name ='Command']");
                var wrapperThis = this;
                wrapperThis.processQueue();
                $("#dropzoneJsForm").submit();
                //submitButton.addEventListener("click", function (event) {
                //    $(".overlay").show();
                //    event.preventDefault(event);
                //    wrapperThis.processQueue();

                //    setTimeout(function () {
                //        $("#dropzoneJsForm").submit();
                //    }, 6000);


                //    return false;
                //});


                this.on("addedfile", function (file) {
                    document.getElementById("btnStatusUpdate").disabled = true;
                    // Create the remove button
                    var removeButton = Dropzone.createElement("<button class='btn btn-lg dark'>Remove File</button>");

                    // Listen to the click event
                    removeButton.addEventListener("click", function (e) {
                        // Make sure the button click doesn't submit the form:
                        //e.defaultPrevented();
                        //e.stopPropagation();

                        // Remove the file preview.
                        wrapperThis.removeFile(file);
                        // If you want to the delete the file on the server as well,
                        // you can do the AJAX request here.
                    });

                    // Add the button to the file preview element.
                    file.previewElement.appendChild(removeButton);
                });

                //this.on('sendingmultiple', function (data, xhr, formData) {
                //    formData.append("TravelRequestID", $("#TravelRequestID").val());
                //});
                this.on("success", function (file, response) {
                    //alert(file);
                    // or however you would point to your assigned file ID here;
                    //alert(JSON.stringify(response));
                    document.getElementById("FileDirectoryForChangeStatus").value = JSON.stringify(response);
                    document.getElementById("btnStatusUpdate").disabled = false;
                    // console should show the ID you pointed to
                    // do stuff with file.id ...
                });
            }

        };




    </script>

    <script type="text/javascript">
        function activaTab() {

            var active_tab_selector = "#tab1";

            //find actived navigation and remove 'active' css
            //  var actived_nav = "#tab1";
            // actived_nav.removeClass('active');

            //add 'active' css into clicked navigation
            $(this).parents('li').addClass('active');

            //hide displaying tab content
            $(active_tab_selector).removeClass('active');
            $(active_tab_selector).addClass('hide');
            alert(active_tab_selector);
            //show target tab content
            var target_tab_selector = "#tab2";
            $(target_tab_selector).removeClass('hide');
            $(target_tab_selector).addClass('active');
            alert(target_tab_selector);
        };

    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.nav-tabs > li > a').click(function (event) {
                event.preventDefault();//stop browser to take action for clicked anchor

                //get displaying tab content jQuery selector
                var active_tab_selector = $('.nav-tabs > li.active > a').attr('href');

                //find actived navigation and remove 'active' css
                var actived_nav = $('.nav-tabs > li.active');
                actived_nav.removeClass('active');

                //add 'active' css into clicked navigation
                $(this).parents('li').addClass('active');

                //hide displaying tab content
                $(active_tab_selector).removeClass('active');
                $(active_tab_selector).addClass('hide');

                //show target tab content
                var target_tab_selector = $(this).attr('href');
                $(target_tab_selector).removeClass('hide');
                $(target_tab_selector).addClass('active');

            });
        });
    </script>
    <style>
        /** Start: to style navigation tab **/
        .nav {
            margin-bottom: 18px;
            margin-left: 0;
            list-style: none;
        }

            .nav > li > a {
                display: block;
            }

        .nav-tabs {
            *zoom: 1;
        }

            .nav-tabs:before,
            .nav-tabs:after {
                display: table;
                content: "";
            }

            .nav-tabs:after {
                clear: both;
            }

            .nav-tabs > li {
                float: left;
            }

                .nav-tabs > li > a {
                    padding-right: 12px;
                    padding-left: 12px;
                    margin-right: 2px;
                    line-height: 14px;
                }

        .nav-tabs {
            border-bottom: 1px solid #ddd;
        }

            .nav-tabs > li {
                margin-bottom: -1px;
            }

                .nav-tabs > li > a {
                    padding-top: 8px;
                    padding-bottom: 8px;
                    line-height: 18px;
                    border: 1px solid transparent;
                    -webkit-border-radius: 4px 4px 0 0;
                    -moz-border-radius: 4px 4px 0 0;
                    border-radius: 4px 4px 0 0;
                }

                    .nav-tabs > li > a:hover {
                        border-color: #eeeeee #eeeeee #dddddd;
                    }

            .nav-tabs > .active > a,
            .nav-tabs > .active > a:hover {
                color: #555555;
                cursor: default;
                background-color: #ffffff;
                border: 1px solid #ddd;
                border-bottom-color: transparent;
            }

        li {
            line-height: 18px;
        }

        .tab-content.active {
            display: block;
        }

        .tab-content.hide {
            display: none;
        }


        /** End: to style navigation tab **/

        .ui-timepicker-container {
            z-index: 3500 !important;
        }
    </style>
</body>
</html>

