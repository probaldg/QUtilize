@model QBA.Qutilize.WebApp.Models.ProjectModel
@{
    ViewBag.Title = "Manage ProjectIssue";
    Layout = "~/Views/Shared/_ViewStartPrivate.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Manage Tickets</title>
</head>
<body>
    @{
        var strMSGforSave = string.Empty;
        string strStyle = string.Empty;
        string strErrorStyle = string.Empty;
        var strMsgforErr = string.Empty;
        // var strerrorStyle = string.Empty;

        var errMsg = TempData["ErrMsg"] != null ? TempData["ErrMsg"] : "";

        var ErrStatus = TempData["ErrStatus"] != null ? Convert.ToBoolean(TempData["ErrStatus"]) : false;
        if (ErrStatus == true)
        {
            strMsgforErr = errMsg.ToString();

        }
        else
        {
            strMSGforSave = errMsg.ToString();
            strMsgforErr = string.Empty;
        }

        if (strMSGforSave != "")
        {
            strStyle = "display:block";
        }
        else
        {
            strStyle = "display:none";
        }
        if (strMsgforErr != "")
        {
            strErrorStyle = "display:block";
        }
        else
        {
            strErrorStyle = "display:none";
        }



    }
    <div class="form-horizontal col-md-12">
        <div class="alert alert-success alert-dismissible" role="alert" id="divSuccess" style="@strStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            @strMSGforSave
        </div>
    </div>
    <div class="form-horizontal col-md-12">
        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg1" name="ErrorMsg1" style="@strErrorStyle">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            @strMsgforErr
        </div>
    </div>
    <h4>Manage Tickets</h4>
    <br />
    <div align="right">

    </div>
    <div align="right">
        
        <button class="btn btn-primary" onclick="downloadExcelFile()"><i class="fa fa-arrow-circle-down"></i>Download Template</button>
        <button class="btn btn-primary" onclick="ShowPopupforTemplateUpload()"><i class="fa fa-arrow-circle-up"></i>Bulk Upload</button>
        <input type="button" value="Add New Ticket" style="text-align: right;" class="btn btn-primary" onclick="AddNewTicket()">
    </div>
    <div>
        <ul class="nav nav-tabs">
            <li class="active">
                <a href="#tab1" style="font-weight:bold; font-size:medium">Tickets created By  @HttpContext.Current.Session["Name"].ToString() </a>
            </li>
            <li>
                <a href="#tab2" style="font-weight:bold; font-size:medium">My Tickets</a>
            </li>

        </ul>
    </div>
    <section id="tab1" class="tab-content active">
        <div>

            <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">
                <table class="table table-striped table-bordered myTable" id="tblGridListViewPost">
                    <thead id="tblHeadListViewPost">
                        <tr>
                            <th class="text-center tblHeaderColor sorting">Ticket ID</th>
                            <th class="text-center tblHeaderColor sorting">Project Name</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Code</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Name</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Type</th>
                            <th class="text-center tblHeaderColor sorting">Expected Start Date</th>
                            <th class="text-center tblHeaderColor sorting">Expected End Date</th>
                            <th class="text-center tblHeaderColor sorting">Expected Time</th>
                            <th class="text-center tblHeaderColor sorting">Severity</th>
                            <th class="text-center tblHeaderColor sorting">Percentage Complete</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Status</th>

                            <th class="text-center tblHeaderColor sorting">Status</th>
                            <th hidden="hidden" class="text-center tblHeaderColor sorting">Edit</th>
                            <th class="text-center tblHeaderColor sorting">View</th>
                        </tr>
                    </thead>
                    <tbody>
                        @Html.Action("LoadProjectIssueData", "Admin")
                    </tbody>
                </table>
            </div>
        </div>
        <div>

        </div>


    </section>
    <section id="tab2" class="tab-content  hide">
        <div>

            <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:15px">
                <table class="table table-striped table-bordered myTable" id="tblGridListViewPost1">
                    <thead id="tblHeadListViewPost">
                        <tr>
                            <th class="text-center tblHeaderColor sorting">Ticket ID</th>
                            <th class="text-center tblHeaderColor sorting">Project Name</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Code</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Name</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Type</th>
                            <th class="text-center tblHeaderColor sorting">Expected Start Date</th>
                            <th class="text-center tblHeaderColor sorting">Expected End Date</th>
                            <th class="text-center tblHeaderColor sorting">Expected Time</th>
                            <th class="text-center tblHeaderColor sorting">Severity</th>
                            <th class="text-center tblHeaderColor sorting">Percentage Complete</th>
                            <th class="text-center tblHeaderColor sorting">Ticket Status</th>
                            <th class="text-center tblHeaderColor sorting">Status</th>
                            <th class="text-center tblHeaderColor sorting">Change Ticket Status</th>
                            <th class="text-center tblHeaderColor sorting">View</th>
                        </tr>
                    </thead>
                    <tbody>
                        @Html.Action("LoadProjectIssueAssignedtoUser", "Admin")
                    </tbody>
                </table>
            </div>
        </div>
    </section>
    <div class="col-md-12"><br /></div>
    <div id="mymodalForNewTicket" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color:#626262;" id="hProjectNameHeader"></h4>
                </div>

                <div class="modal-body">

                    <div class="col-md-12"><br /></div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-success alert-dismissible" role="alert" id="divSaveSuccess" style="display:none;">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            Data Saved Successfully.
                        </div>
                    </div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsg" name="ErrorMsg" style="display:none">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>

                            <span id="errormsg"></span>
                        </div>
                    </div>
                    @using (Html.BeginForm("ManageProjectIssue", "Admin", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                    <div class="form-horizontal col-md-12" style="">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ProjectIssue.IssueId)


                        <div class="form-group">
                            @Html.LabelFor(model => model.ActiveProjectList, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.ActiveProjectList, new SelectList(Model.ActiveProjectList, "ProjectID", "ProjectName"), "Select", new { @class = "form-control", onchange = "GetAssigneUserDetlByProject()" })
                                @Html.HiddenFor(model => model.ActiveProjectID)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectTypeList, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.ProjectTypeList, new SelectList(Model.ProjectTypeList, "ID", "Name"), "Select", new { @class = "form-control", disabled = "true" })
                                @Html.HiddenFor(model => model.ProjectTypeID)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.IssueCode, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.IssueCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.IssueCode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TicketTypeList, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.TicketTypeList, new SelectList(Model.TicketTypeList, "ID", "Name"), "Select", new { @class = "form-control" })
                                @Html.HiddenFor(model => model.TicketTypeID)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.IssueName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.IssueName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.IssueName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.IssueDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.IssueDescription, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.IssueDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.IssueStartDateDisplay, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.IssueStartDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.IssueStartDateDisplay, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.IssueEndDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.IssueEndDateDisplay, new { htmlAttributes = new { @class = "form-control", onchange = "ValidateEndDate()" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.IssueEndDateDisplay, "", new { @class = "text-danger", })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.ExpectedTime, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.ExpectedTime, new { htmlAttributes = new { @class = "form-control", type = "number", onkeypress = "return MaxLengthOfTextbox()" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.ExpectedTime, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <select id="ddlIssueStatus" class="form-control"><option value="0">Select</option></select>
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.SeverityList, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.SeverityList, new SelectList(Model.SeverityList, "ID", "Name"), "Select", new { @class = "form-control" })
                                @Html.HiddenFor(model => model.SeverityID)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Percentage Complete", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <select id="ddlPercentage" class="form-control"><option value="">Select</option></select>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Assigned to", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10" id="divUserDDL">
                                @Html.HiddenFor(model => model.ProjectIssue.UserIdAssigned)
                                <input type="hidden" id="UserIdsInString" name="UserIdsInString" />
                                <select id="ddlUsersAssigned" class="form-control" multiple="multiple"><option value="">Select User</option></select>
                            </div>

                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.ActualIssueStartDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.ActualIssueStartDateDisplay, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.ActualIssueStartDateDisplay, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.ActualIssueEndDateDisplay, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.ActualIssueEndDateDisplay, new { htmlAttributes = new { @class = "form-control", onchange = "ValidateActualEndDate()" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.ActualIssueEndDateDisplay, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.ProjectIssue.IsActive)
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.IsActive, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.IsValueAdded, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.ProjectIssue.IsValueAdded)
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.IsValueAdded, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-10">
                                @Html.Label("*When you upload the multiple Url at a time you need to separate all url using by ';' ", htmlAttributes: new { @class = "control-label col-md-10" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectIssue.url, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ProjectIssue.url, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ProjectIssue.url, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Attachments", htmlAttributes: new { @class = "control-label col-md-2" })


                            <div class="col-md-10" id="my-dropzoneUp">
                                <div class='dropzone' id='my-dropzone' name='mainFileUploader'>
                                    <div class='fallback'>
                                        <input name='file' type='file' multiple />
                                    </div>
                                </div>
                            </div>
                        </div>

                        @*<div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnProjectIssueSave" class="btn btn-default" value="Submit">
            </div>
        </div>*@
                    </div>

                    }

                </div>

                <div class="modal-footer">
                    <input type="button" id="btnProjectIssueSave" class="btn btn-default" value="Submit">

                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>

    </div>



    <div id="mymodal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <input type="hidden" id="SelectedProjectId" />

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color:#626262;" id="hStatusIssueHeader">Change Status Issue</h4>
                </div>

                <div class="modal-body">

                    <div class="col-md-12"><br /></div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-success alert-dismissible" role="alert" id="divSaveSuccess" style="display:none;">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            Data Saved Successfully.
                        </div>
                    </div>
                    <div class="form-horizontal col-md-12">
                        <div class="alert alert-danger alert-dismissable fade in" id="ErrorMsgTask" name="ErrorMsgTask" style="display:none">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <span id="errormsgforTask"></span>
                        </div>
                    </div>
                    @using (Html.BeginForm())
                    {

                        <div class="form-horizontal col-md-12" style="border: 1px solid #f1f1f1; padding:5px">
                            <input type="hidden" name="FileDirectory" id="FileDirectory" value="" />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.ProjectIssue.IssueIdforstatus)

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectIssue.IssueCodeforChangeStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectIssue.IssueCodeforChangeStatus, new { htmlAttributes = new { @class = "form-control", disabled = "true" } })
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.IssueCodeforChangeStatus, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectIssue.IssueNameforChangeStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectIssue.IssueNameforChangeStatus, new { htmlAttributes = new { @class = "form-control", disabled = "true" } })
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.IssueNameforChangeStatus, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="ddlIssueStatusChange" class="form-control"><option value="0">Select</option></select>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectIssue.ActualIssueStartDateDisplayforstatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectIssue.ActualIssueStartDateDisplayforstatus, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.ActualIssueStartDateDisplayforstatus, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectIssue.ActualIssueEndDateDisplayforstatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectIssue.ActualIssueEndDateDisplayforstatus, new { htmlAttributes = new { @class = "form-control", onchange = "ValidateActualEndDateForStatus()" } })
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.ActualIssueEndDateDisplayforstatus, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">

                                @Html.LabelFor(model => model.ProjectIssue.Timespent, htmlAttributes: new { @class = "control-label col-md-2 " })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectIssue.Timespent, new { htmlAttributes = new { @class = "form-control", type = "number", onkeypress = "return MaxLengthOfTextbox()" } })
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.Timespent, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectIssue.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectIssue.Comment, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.Comment, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("", htmlAttributes: new { @class = "control-label col-md-2" })

                                <div class="col-md-10">
                                    @Html.Label("*When you upload the multiple Url at a time you need to separate all url using by ';' ", htmlAttributes: new { @class = "control-label col-md-10" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProjectIssue.commenturl, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ProjectIssue.commenturl, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProjectIssue.commenturl, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Attachments", htmlAttributes: new { @class = "control-label col-md-2" })


                                <div class="col-md-10" id="my-dropzoneUp">
                                    <div class='dropzone' id='my-dropzone' name='mainFileUploader'>
                                        <div class='fallback'>
                                            <input name='file' type='file' multiple />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    }
                    <div class="modal-footer">
                        <input type="button" id="btnStatusUpdate" class="btn btn-default" value="Submit">

                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>

                </div>

            </div>

        </div>
    </div>

    <div class="modal fade" @*id="myModal2"*@ id="publishedModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog-big" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel2"></h4>
                </div>

                <div class="modal-body" id="previewSection">


                </div>

            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->
    @* Modal for Upload Template*@
    <div id="myModalTemplateUpload" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h5 class="modal-title">Upload File for Create New Ticket</h5>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Upload file</label>
                        </div>
                        <div class="col-md-8">
                            <input type="file" name="NewTicketUpload" class="form-control" id="NewTicketUpload" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">

                        </div>
                        <div class="col-md-8">
                            <label style="color:red">*File extension should be .xlsx<br />*Column sequence should not be changed<br />*When you assigne the multiple user at a time you need to separate all user using by ';'</label>
                            <label style="color:red">*Project Name,Ticket Code,Ticket Type,Ticket Name,start Date,End Date,Status,Severity,Percentage Complete,Assigned to feild are mandatory <br />*IsActive and IsValueAdded format are 'true'/'false' <br />Expected Time format like '10.30'</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-default" id="viewfileL1" value="Upload" onclick="UploadExcelForIssue()" data-dismiss="modal" />
                    <button type="button" class="btn btn-default" data-dismiss="modal" id="btnCloseModalL1">Close</button>
                </div>
            </div>
        </div>
    </div>


    <script type="text/javascript">

       
        
        //Download Excel
          function downloadExcelFile() {
        try {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("GenerateExcelForIssue", "Admin")',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                }),
                success: function (response) {
                    window.location = '/Admin/DownloadExcelTemplateForIssue?fileid=' + response
                }
            })
        }
        catch (e) {
            alert(e);
        }
    }

        //End
                //Upload Excel Template 
        function UploadExcelForIssue() {
            try {
               
                var formData = new FormData();
                var totalFiles = document.getElementById("NewTicketUpload").files.length;
                for (var i = 0; i < totalFiles; i++) {
                    var file = document.getElementById("NewTicketUpload").files[i];
                   
                    formData.append("FileUpload", file);
                }
             
                $.ajax({
                    url: '@Url.Action("UploadExcelForCreateNewTicket", "Admin")',
                    type: 'POST',
                    beforeSend: function () {
                        $('#spinner').show();
                    },
                    data: formData,
                    async: false,
                    cache: false,
                    contentType: false,
                    enctype: 'multipart/form-data',
                    processData: false,
                    success: function (response) {
                        if (response == "Success") {
                            response = null;
                          
                            location.reload();


                        } else {
                        }

                    },
                    error: function (response) {



                    }
                })
            }
            catch (e) {
                alert(e);
            }
        } 

        //End upload


        //Show mpdal
        function ShowPopupforTemplateUpload() {
            
            $('#myModalTemplateUpload').modal('show');
        }
        //Length of expected date
        function MaxLengthOfTextbox() {
            var ExpectedTime = $('#ProjectIssue_ExpectedTime').val();
            var timespent = $('#ProjectIssue_Timespent').val();
            var timespentlength = timespent.length;
            var Length = ExpectedTime.length;
            if (Length > 6) {
                return false;
            }
            if (timespentlength > 6) {
                return false;
            }
            return true;

        }; 
        
    </script>

    <script type="text/javascript">
        function AddNewTicket() {

            clearAllIssueControls();
            $('#hProjectNameHeader').html("Create New Ticket");

            $('#mymodalForNewTicket').modal('show');
        }

        function PreviewTheIssueDetails(IssueId)
        {
            $.ajax({
                url: '@Url.Action("previewIssue", "Admin")',
                type: "POST",
                dataType: "html",
                contentType: "application/json; charset=utf-8",
                //data: { s_People_ID: People_ID },
                data: JSON.stringify({
                    "IssueId": IssueId
                }),
                success: function (response) {
                    $('#publishedModal').modal('show');
                    $('#previewSection').html(response);
                },
                error: function (response) {
                    console.log(response);
                }
            });
        }
        

        function ShowPopupforChangeStatus(issueid, StatusID,Issuecode,Issuename) {
            $('#ProjectIssue_IssueIdforstatus').val(issueid);

            document.getElementById("ErrorMsgTask").innerHTML = "";
            document.getElementById("ErrorMsgTask").style.display = 'none';
            $.ajax({
                    url: '@Url.Action("LoadStatus", "Admin")',
                    type: 'POST',
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                   data: JSON.stringify({
                       "IssueId": issueid
                   }),

                    success: function (result) {
                        var str = result.split("|");
                        var IssueObj = JSON.parse(str[1]);


                     $("#ddlIssueStatusChange").html("");
                     $("#ddlIssueStatusChange").append(str[0]);
                     $('#ddlIssueStatusChange').val(StatusID);
                     $('#ProjectIssue_IssueCodeforChangeStatus').val(Issuecode);
                     $('#ProjectIssue_IssueNameforChangeStatus').val(Issuename);
                        $("#ProjectIssue_commenturl").val('');
                        $("#FileDirectory").val('');
                        $("#ProjectIssue_Timespent").val('');

                     $("#ProjectIssue_ActualIssueStartDateDisplayforstatus").val('');
                     $("#ProjectIssue_ActualIssueEndDateDisplayforstatus").val('');
                     $("#ProjectIssue_ActualIssueEndDateDisplayforstatus").removeAttr('disabled');
                        $("#ProjectIssue_ActualIssueStartDateDisplayforstatus").attr("disabled", "disabled");
                        if (IssueObj.ActualIssueStartDate != null) {
                            $('#ProjectIssue_ActualIssueStartDateDisplayforstatus').val(formatDateInMM_DD_YYYY(IssueObj.ActualIssueStartDate));
                        }
                        if (IssueObj.ActualIssueEndDate != null) {
                            $('#ProjectIssue_ActualIssueEndDateDisplayforstatus').val(formatDateInMM_DD_YYYY(IssueObj.ActualIssueEndDate));
                        }
                        $("#ProjectIssue_Timespent").val(IssueObj.Timespent);
                        $('#mymodal').modal('show');

                        var IssueStatus = $("#ddlIssueStatusChange option:selected").text();
                        $('#ddlIssueStatusChange').change(function () {
                         var ChangedStatus = $("#ddlIssueStatusChange option:selected").text();
                         var systemDATE = new Date();
                         var dd = String(systemDATE.getDate()).padStart(2, '0');
                         var mm = String(systemDATE.getMonth() + 1).padStart(2, '0'); //January is 0!
                         var yyyy = systemDATE.getFullYear();
                         systemDATE = mm + '/' + dd + '/' + yyyy;

                         if (IssueStatus == "OPEN") {

                             $('#ProjectIssue_ActualIssueStartDateDisplayforstatus').val(systemDATE)


                         }
                            if (ChangedStatus == "CLOSED") {

                                $('#ProjectIssue_ActualIssueEndDateDisplayforstatus').val(systemDATE)
                                $("#ProjectIssue_ActualIssueEndDateDisplayforstatus").attr("disabled", "disabled");

                            }
                            else {
                                $("#ProjectIssue_ActualIssueEndDateDisplayforstatus").removeAttr('disabled');
                            }

                     });
                 },
                 error: function () {

                 },
                });

        }

        function ValidateActualEndDateForStatus() {
            var startDate = $('#ProjectIssue_ActualIssueStartDateDisplayforstatus').val();

            var endDate = $('#ProjectIssue_ActualIssueEndDateDisplayforstatus').val();
            if (startDate != '' && endDate != '') {

                if (Date.parse(startDate) > Date.parse(endDate)) {
                    $('#ProjectIssue_IssueEndDateDisplay').val('');
                    alert("Start date should not be greater than end date");
                    return false;
                }
            }

        };
        function ValidateEndDate() {
            var startDate = $('#ProjectIssue_IssueStartDateDisplay').val();

            var endDate = $('#ProjectIssue_IssueEndDateDisplay').val();
            if (startDate != '' && endDate != '') {

                if (Date.parse(startDate) > Date.parse(endDate)) {
                    $('#ProjectIssue_IssueEndDateDisplay').val('');
                    alert("Start date should not be greater than end date");
                    return false;
                }
            }

        };
        function ValidateActualEndDate() {
            var startDate = $('#ProjectIssue_ActualIssueStartDateDisplay').val();

            var endDate = $('#ProjectIssue_ActualIssueEndDateDisplay').val();
            if (startDate != '' && endDate != '') {

                if (Date.parse(startDate) > Date.parse(endDate)) {
                    $('#ProjectIssue_ActualIssueEndDateDisplay').val('');
                    alert("Actual Start date should not be greater than Actual end date");
                    return false;
                }
            }

        };

        function validateIssueSave() {

            var projectID = $('#ActiveProjectList').val();

            var IssueName = $('#ProjectIssue_IssueName').val();
            var IssueCode = $('#ProjectIssue_IssueCode').val();
            //var IssueDescription = $('#ProjectIssue_IssueDescription').val();

            var startDate = $('#ProjectIssue_IssueStartDateDisplay').val();
            var endDate = $('#ProjectIssue_IssueEndDateDisplay').val();


            var actualStartDate = $('#ProjectIssue_ActualIssueStartDateDisplay').val();
            var actualEndDate = $('#ProjectIssue_ActualIssueEndDateDisplay').val();


            var SeverityId = $('#SeverityList').val();
            var TicketTypeID = $('#TicketTypeList').val();

            var userIds = $('#UserIdsInString').val();



            if (IssueCode == "") {
                document.getElementById("errormsg").innerHTML = "Ticket code is required..";
                document.getElementById("ErrorMsg").style.display = 'block';
                $('#ProjectIssue_IssueCode').focus();
                return false;
            }


            if (IssueName == "") {
                document.getElementById("errormsg").innerHTML = "Ticket name is required..";
                document.getElementById("ErrorMsg").style.display = 'block';
                $('#ProjectIssue_IssueName').focus();
                return false;
            }

            if (TicketTypeID <= 0) {
                document.getElementById("errormsg").innerHTML = "Please select Ticket Type ";
                document.getElementById("ErrorMsg").style.display = 'block';
                $('#TicketTypeList').focus();
                return false;
            }

            if (startDate == "") {
                document.getElementById("errormsg").innerHTML = "Start date is required..";
                document.getElementById("ErrorMsg").style.display = 'block';
                $('#ProjectIssue_IssueStartDateDisplay').focus();
                return false;
            }
            if (endDate == "") {
                document.getElementById("errormsg").innerHTML = "End date is required..";
                document.getElementById("ErrorMsg").style.display = 'block';
                $('#ProjectIssue_IssueEndDateDisplay').focus();
                return false;
            }



            if (SeverityId <= 0) {
                document.getElementById("errormsg").innerHTML = "Please select Severity ";
                document.getElementById("ErrorMsg").style.display = 'block';
                $('#SeverityList').focus();
                return false;
            }



            return true;
        }
       // $("#ProjectIssue_Timespent").timepicker({ timeFormat: 'HH:mm' });
        //$("#ProjectIssue_ExpectedTime").timepicker({
        //    timeFormat: 'HH:mm',
        //    maxTime:'500'
           
        //});

        $("#tblGridListViewPost").dataTable();
        $("#tblGridListViewPost1").dataTable();
        $('#ProjectIssue_ActualIssueStartDateDisplay').datepicker({
            changeMonth: true,
            changeYear: true
        });

        $('#ProjectIssue_ActualIssueEndDateDisplay').datepicker({
            changeMonth: true,
            changeYear: true

        });
        $('#ProjectIssue_IssueStartDateDisplay').datepicker({
            changeMonth: true,
            changeYear: true,


        });

        $('#ProjectIssue_IssueEndDateDisplay').datepicker({
            changeMonth: true,
            changeYear: true


        });

        $('#ProjectIssue_ActualIssueStartDateDisplayforstatus').datepicker({
            changeMonth: true,
            changeYear: true


        });
        $('#ProjectIssue_ActualIssueEndDateDisplayforstatus').datepicker({
            changeMonth: true,
            changeYear: true


        });





    //Issue Status Update
    $('#btnStatusUpdate').click(function () {
    var IssueID = $('#ProjectIssue_IssueIdforstatus').val();
    var actualStartDate = $('#ProjectIssue_ActualIssueStartDateDisplayforstatus').val();
    var actualEndDate = $('#ProjectIssue_ActualIssueEndDateDisplayforstatus').val();
    var IssueStatusId = $('#ddlIssueStatusChange').val();
    var Comment = $('#ProjectIssue_Comment').val();
    var Timespent = $('#ProjectIssue_Timespent').val();
        var url = $('#ProjectIssue_commenturl').val();
    var vDirectoryName = $("#FileDirectory").val();

        alert(url);
        alert(vDirectoryName);
    if (IssueStatusId <= 0) {
    document.getElementById("ErrorMsgTask").innerHTML = "Please select Status ";
    document.getElementById("ErrorMsgTask").style.display = 'block';
    $('#ddlIssueStatusChange').focus();
    return false;
    }
    if (actualStartDate == "" && IssueStatusId == 11) {
    document.getElementById("ErrorMsgTask").innerHTML = "Actual start date required..";
    document.getElementById("ErrorMsgTask").style.display = 'block';
    $('#ProjectIssue_ActualIssueStartDateDisplayforstatus').focus();
    return false;
    }
    if (actualEndDate == "" && IssueStatusId == 11) {
    document.getElementById("ErrorMsgTask").innerHTML = "Actual end date required..";
    document.getElementById("ErrorMsgTask").style.display = 'block';
    $('#ProjectIssue_ActualIssueEndDateDisplayforstatus').focus();
    return false;

    }
    if (Timespent == "" && IssueStatusId==11) {
    document.getElementById("ErrorMsgTask").innerHTML = "Time Spent required..";
    document.getElementById("ErrorMsgTask").style.display = 'block';
    $('#ProjectIssue_Timespent').focus();
    return false;

    }



   // var hms = Timespent;   // your input string
   // var a = hms.split(':'); // split it at the colons

   // Timespent = a[0] + '.' + a[1];
    var data = {
    "IssueIdforstatus": IssueID,
    "ActualIssueStartDateDisplayforstatus": actualStartDate,
    "ActualIssueEndDateDisplayforstatus": actualEndDate,
    "StatusID": IssueStatusId,
    "Comment": Comment,
    "Duration": Timespent,
    "URL": url,
    "DirectoryName": vDirectoryName

    };

    $.ajax({
    url: '@Url.Action("UpdateStatusIssue", "Admin")',
    type: "POST",
    dataType: "json",
    contentType: "application/json; charset=utf-8",
    data: JSON.stringify(data),
    success: function (response) {
    if (response == "Success") {
    response = null;
    window.location.reload();
    //activaTab();
    }

    },
    error: function (response) {


    }
    });
    });

    //Project Issue Save
    $('#btnProjectIssueSave').click(function () {

    var IssueID = $('#ProjectIssue_IssueId').val();
        var projectID = $('#ActiveProjectList').val();
        var projectName = $("#ActiveProjectList option:selected").text();

    var IssueName = $('#ProjectIssue_IssueName').val();
    var IssueCode = $('#ProjectIssue_IssueCode').val();
    var IssueDescription = $('#ProjectIssue_IssueDescription').val();

    var startDate = $('#ProjectIssue_IssueStartDateDisplay').val();
    var endDate = $('#ProjectIssue_IssueEndDateDisplay').val();
    var ExpectedTime = $('#ProjectIssue_ExpectedTime').val();

    var actualStartDate = $('#ProjectIssue_ActualIssueStartDateDisplay').val();
    var actualEndDate = $('#ProjectIssue_ActualIssueEndDateDisplay').val();

    var completePercent = $('#ddlPercentage').val();

    var IssueStatusId = $('#ddlIssueStatus').val();
    var IsActive = $('#ProjectIssue_IsActive').is(':checked');
    var IsValueAdded = $('#ProjectIssue_IsValueAdded').is(':checked');

    var SeverityId = $('#SeverityList').val();
    var TicketTypeID = $('#TicketTypeList').val();
    var userIds = $('#UserIdsInString').val();

    //validateIssueSave();
    if (projectID <= 0) {
    document.getElementById("errormsg").innerHTML = "Please select Project ";
    document.getElementById("ErrorMsg").style.display = 'block';
    $('#ActiveProjectList').focus();
    return false;
    }
    if (IssueCode == "") {
    document.getElementById("errormsg").innerHTML = "Ticket code is required..";
    document.getElementById("ErrorMsg").style.display = 'block';
    $('#ProjectIssue_IssueCode').focus();
    return false;
    }
    if (TicketTypeID <= 0) {
    document.getElementById("errormsg").innerHTML = "Please select Ticket Type ";
    document.getElementById("ErrorMsg").style.display = 'block';
    $('#TicketTypeList').focus();
    return false;
    }

    if (IssueName == "") {
    document.getElementById("errormsg").innerHTML = "Ticket name is required..";
    document.getElementById("ErrorMsg").style.display = 'block';
    $('#ProjectIssue_IssueName').focus();
    return false;
    }


    if (startDate == "") {
    document.getElementById("errormsg").innerHTML = "Start date is required..";
    document.getElementById("ErrorMsg").style.display = 'block';
    $('#ProjectIssue_IssueStartDateDisplay').focus();
    return false;
    }
    if (endDate == "") {
    document.getElementById("errormsg").innerHTML = "End date is required..";
    document.getElementById("ErrorMsg").style.display = 'block';
    $('#ProjectIssue_IssueEndDateDisplay').focus();
    return false;
    }

    //if (ExpectedTime == "") {
    //document.getElementById("errormsg").innerHTML = "Expecte Time required..";
    //document.getElementById("ErrorMsg").style.display = 'block';
    //$('#ProjectIssue_ExpectedTime').focus();
    //return false;
    //}

    if (ExpectedTime == "") {
        ExpectedTime = 0.00;
    }

    if (SeverityId <= 0) {
    document.getElementById("errormsg").innerHTML = "Please select Severity ";
    document.getElementById("ErrorMsg").style.display = 'block';
    $('#SeverityList').focus();
    return false;
    }
    if (Date.parse(startDate) > Date.parse(endDate)) {
    alert("End date can not be less than  start date..");
    $('#ProjectIssue_IssueStartDateDisplay').focus();
    return false;
    }
    if (actualStartDate != "" && actualEndDate != "") {
    if (Date.parse(actualStartDate) > Date.parse(actualEndDate)) {
    alert("Actual end date can not be less than actual start date..");
    $('#ProjectIssue_ActualIssueStartDateDisplay').focus();
    return false;
    }
    }

    if (userIds == "") {

    alert("Please select a user to assign task");
    $('#ddlUsersAssigned').focus();

    return false;
        }
        var url = $('#ProjectIssue_url').val();
        var vDirectoryName = $("#FileDirectory").val();

    //var hms = ExpectedTime;   // your input string
    //var a = hms.split(':'); // split it at the colons

    //ExpectedTime = a[0] + '.' + a[1];

    var data = {
    "IssueID": IssueID,
    "ProjectID": projectID,
    "IssueName": IssueName,
    "IssueCode": IssueCode,
    "IssueDescription": IssueDescription,
    "TicketTypeID": TicketTypeID,
    "IssueStartDateDisplay": startDate,
    "IssueEndDateDisplay": endDate,
    "ExpectedDuration": ExpectedTime,

    "ActualIssueStartDateDisplay": actualStartDate,
    "ActualIssueEndDateDisplay": actualEndDate,
    "CompletePercent": completePercent,
    "IsActive": IsActive,
    "SeverityID": SeverityId,
    "StatusID": IssueStatusId,
    "UserIdAssigned": userIds,
    "IsValueAdded": IsValueAdded,
        "ProjectName": projectName,
        "URL": url,
        "DirectoryName": vDirectoryName

    };

    $.ajax({
    url: '@Url.Action("SaveProjectIssue", "Admin")',
    type: "POST",
    dataType: "json",
    contentType: "application/json; charset=utf-8",
    data: JSON.stringify(data),
    success: function (response) {
    if (response == "Success") {
    response = null;
    clearAllIssueControls();
    location.reload();


    } else {
    }

    },
    error: function (response) {



    }
    });

    })
    //End
       

    $('#ddlUsersAssigned').change(function () {


    var userIds = $("#ddlUsersAssigned option:selected").map(function () { return this.value }).get().join(",");

    $('#UserIdsInString').val(userIds);



    })

    function GetAssigneUserDetlByProject() {

    var ProjectId = $('#ActiveProjectList').val();

    $("#ddlUsersAssigned").multiselect('destroy');

    $.ajax({
    url: '@Url.Action("ManageProjectTask", "Admin")',
    type: "POST",
    dataType: "json",
    contentType: "application/json; charset=utf-8",
    data: JSON.stringify({ "ProjectId": ProjectId }),
    success: function (response) {
    var obj = JSON.parse(response);

    if (obj.PercentageComplete.length > 0) {
    var percentageArray = obj.PercentageComplete;
    $("#ddlPercentage").html('');
    for (var i = 0; i < percentageArray.length; i++) {
    $("#ddlPercentage").append($("<option></option>").val(percentageArray[i]).html(percentageArray[i]));
    }
    }
    $("#ddlIssueStatus").html('')
    //$("#ddlTaskStatus").append($("<option></option>").val(0).html('Select status'));
    if (obj.StatusList.length > 0) {
    var statusList = obj.StatusList;
    for (var i = 0; i < statusList.length; i++) {

    $("#ddlIssueStatus").append($("<option></option>").val(statusList[i].StatusID).html(statusList[i].StatusName));
    }
    }

    if (obj.TaskList.length > 0) {
    var tasklist = obj.TaskList;
    $('#ProjectTypeList').val(tasklist[0].ProjectTypeID);

    }

    $("#ddlUsersAssigned").html('')

    if (obj.UserList.length > 0) {

    var UserList = obj.UserList;

    for (var i = 0; i < UserList.length; i++) {

    $("#ddlUsersAssigned").append($("<option></option>").val(UserList[i].ID).html(UserList[i].Name));
    }


    //$("#ddlUsersAssigned").multiselect('refresh');
    $("#ddlUsersAssigned").multiselect({
    enableCaseInsensitiveFiltering: true,
    buttonWidth: 550,
    enableFiltering: true
    });

    }
    else {
    // $('#divUserDDL').removeClass('col-md-10');
    // $('#divUserDDL').addClass('col-md-7');
    // $('#divAddUserToAssignProject').css('display', 'block');

    //$("#ddlUsersAssigned").multiselect('refresh');
    $("#ddlUsersAssigned").multiselect({
    enableCaseInsensitiveFiltering: true,
    buttonWidth: 550,
    enableFiltering: true
    });

    }
    }


    });

    };


    //Project Issue Edit Start**
    function AjaxCallGetUserByProject(project_id, statusid, CompletePercent, UserIdAssigned) {
    $.ajax({
    url: '@Url.Action("ManageProjectTask", "Admin")',
    type: "POST",
    dataType: "json",
    contentType: "application/json; charset=utf-8",
    data: JSON.stringify({ "ProjectId": project_id }),
    success: function (response) {

    var obj1 = JSON.parse(response);
        
    if (obj1.PercentageComplete.length > 0) {
    var percentageArray = obj1.PercentageComplete;
    $("#ddlPercentage").html('');
    for (var i = 0; i < percentageArray.length; i++) {

    $("#ddlPercentage").append($("<option></option>").val(percentageArray[i]).html(percentageArray[i]));
    }
    }
    $('#ddlPercentage').val(CompletePercent);
    $("#ddlIssueStatus").html('')
    if (obj1.StatusList.length > 0) {
    var statusList = obj1.StatusList;
    for (var i = 0; i < statusList.length; i++) {

    $("#ddlIssueStatus").append($("<option></option>").val(statusList[i].StatusID).html(statusList[i].StatusName));
    }
    }

    $('#ddlIssueStatus').val(statusid);
    if (obj1.TaskList.length > 0) {
    var tasklist = obj1.TaskList;
    $('#ProjectTypeList').val(tasklist[0].ProjectTypeID);
    }
    $("#ddlUsersAssigned").html('')

    if (obj1.UserList.length > 0) {
    var UserList = obj1.UserList;
    for (var i = 0; i < UserList.length; i++) {
    ///alert(UserList[i].ID)
    $("#ddlUsersAssigned").append($("<option></option>").val(UserList[i].ID).html(UserList[i].Name));

    }

    $("#ddlUsersAssigned").multiselect({
    enableCaseInsensitiveFiltering: true,
    buttonWidth: 550,
    enableFiltering: true
    });

    }
    else {

    $("#ddlUsersAssigned").multiselect({
    enableCaseInsensitiveFiltering: true,
    buttonWidth: 550,
    enableFiltering: true
    });

    }


    var userIds = UserIdAssigned;
    //alert(userIds)
    var selectedOptions = UserIdAssigned.split(',');
    for (i = 0; i < selectedOptions.length; i++) {

    $('#ddlUsersAssigned').multiselect('select', [selectedOptions[i]]);
    }

    $('#UserIdsInString').val(userIds);


    },
    error: function (response) {
    alert('error occured')
    // console.log(response);
    }
    });
    }
    function clearAllIssueControls() {
    $('#ActiveProjectList').prop('selectedIndex', 0);
    $('#ProjectTypeList').prop('selectedIndex', 0);
    $('#ProjectIssue_IssueId').val('');
    $('#ProjectIssue_IssueName').val('');
    $('#ProjectIssue_IssueCode').val('');
    $('#ProjectIssue_IssueDescription').val('');
    $('#ProjectIssue_IssueStartDateDisplay').val('');
    $('#ProjectIssue_IssueEndDateDisplay').val('');
    $('#ProjectIssue_ActualIssueStartDateDisplay').val('');
    $('#ProjectIssue_ActualIssueEndDateDisplay').val('');
    $('#ProjectIssue_ExpectedTime').val('');

    $('#UserIdsInString').val('');
    $('#ddlIssueStatus').val(0);
    $('#SeverityList').val(0);
    $('#TicketTypeList').val(0);
    $('#TicketTypeID').val(0);
    $('#ddlPercentage').val(0);
    $('#ProjectIssue_IsActive').val(false);
    $('#ProjectIssue_IsActive').prop("checked", false);
    $('#ddlUsersAssigned').multiselect('deselectAll', false);
    $('#ddlUsersAssigned').multiselect('updateButtonText');
    $('#ProjectIssue_IsValueAdded').val(false);
    $('#ProjectIssue_IsValueAdded').prop("checked", false);

    }
    function formatDateInMM_DD_YYYY(yourUnformattedDate) {
    var formattedDate = new Date(yourUnformattedDate);
    var day = formattedDate.getDate();
    var month = formattedDate.getMonth();
    month += 1;  // JavaScript months are 0-11
    var year = formattedDate.getFullYear();
    if (day < 10) {
    day = "0" + day;
    }
    if (month < 10) {
    month = "0" + month;
    }
    // return (day + "/" + month + "/" + year);
    return (month + "/" + day + "/" + year);

    }

    function EditProjectIssue(IssueID) {
    var issueId = IssueID;
    $.ajax({
    url: '@Url.Action("GetProjectIssueByID", "Admin")',
    type: "POST",
    dataType: "json",
    contentType: "application/json; charset=utf-8",
    data: JSON.stringify({
    "IssueId": issueId
    }),
    success: function (response) {

    //clearAllIssueControls();
    var IssueObj = JSON.parse(response);
    $('#hProjectNameHeader').html("TI" + IssueObj.IssueId + " details");
    var project_id = IssueObj.ProjectID;
    AjaxCallGetUserByProject(project_id, IssueObj.StatusID, IssueObj.CompletePercent, IssueObj.UserIdAssigned);
    //**Get user by project
    //**
    $('#ProjectIssue_IssueId').val(IssueObj.IssueId)
    $('#ProjectIssue_IssueName').val(IssueObj.IssueName);
    $('#ProjectIssue_IssueCode').val(IssueObj.IssueCode);
    $('#ProjectIssue_IssueDescription').val(IssueObj.IssueDescription);
    $('#ActiveProjectList').val(IssueObj.ProjectID);
    $('#SeverityList').val(IssueObj.SeverityID);
    $('#TicketTypeList').val(IssueObj.TicketTypeID);
    //   $('#ddlIssueStatus').val(IssueObj.StatusID);

    // $('#ddlPercentage').val(IssueObj.CompletePercent);
    $('#ProjectIssue_IssueStartDateDisplay').val(formatDateInMM_DD_YYYY(IssueObj.IssuestartDate));
    $('#ProjectIssue_IssueEndDateDisplay').val(formatDateInMM_DD_YYYY(IssueObj.IssueEndDate));



    $('#ProjectIssue_ExpectedTime').val(IssueObj.ExpectedTime);


    if (IssueObj.ActualIssueStartDate != null) {
    $('#ProjectIssue_ActualIssueStartDateDisplay').val(formatDateInMM_DD_YYYY(IssueObj.ActualIssueStartDate));
    }
    else {
    $('#ProjectIssue_ActualIssueStartDateDisplay').val('');
    }
    if (IssueObj.ActualIssueEndDate != null) {
    $('#ProjectIssue_ActualIssueEndDateDisplay').val(formatDateInMM_DD_YYYY(IssueObj.ActualIssueEndDate));
    }
    else {
    $('#ProjectIssue_ActualIssueEndDateDisplay').val('');
    }

    $('#ProjectIssue_IsActive').prop('checked', IssueObj.IsActive);
    $('#ProjectIssue_IsValueAdded').prop('checked', IssueObj.IsValueAdded);
    $('#ProjectIssue_UserIdAssigned').val(IssueObj.UserIdAssigned);
    setTimeout(function () {
    $('#ddlUsersAssigned').multiselect('deselectAll', false);
    //$('#ddlUsersAssigned').multiselect('updateButtonText');
    $('#mymodalForNewTicket').modal('show');
    }, 5000);

    },
    error: function (response) {
    alert('error occured')

    }
    });


    }
    if ($('#ProjectIssue_UserIdAssigned').val() != "") {

    var AllselectedOptions = $('#UserIdAssigned').val();
    alert(AllselectedOptions);
    var selectedOptions = AllselectedOptions.split(',');

    for (var i in selectedOptions) {
    var optionVal = selectedOptions[i];
    $("#ddlUsersAssigned").find("option[value=" + optionVal + "]").prop("selected", "selected");
    }
    $("#ddlUsersAssigned").multiselect('reload');
    }
    //End**

    </script>
    <script type="text/javascript">
        function activaTab() {

            var active_tab_selector = "#tab1";

            //find actived navigation and remove 'active' css
            //  var actived_nav = "#tab1";
            // actived_nav.removeClass('active');

            //add 'active' css into clicked navigation
            $(this).parents('li').addClass('active');

            //hide displaying tab content
            $(active_tab_selector).removeClass('active');
            $(active_tab_selector).addClass('hide');
            alert(active_tab_selector);
            //show target tab content
            var target_tab_selector = "#tab2";
            $(target_tab_selector).removeClass('hide');
            $(target_tab_selector).addClass('active');
            alert(target_tab_selector);
        };

    </script>

    <script type="text/javascript">

        var DirectoryName = "";
        if (document.getElementById("FileDirectory").value != "") {
            DirectoryName = document.getElementById("FileDirectory").value;
        } else {
            DirectoryName = "";
        }

        Dropzone.options.myDropzone = {
            url: "/Admin/IssueAttachments",
            autoProcessQueue: true,
            uploadMultiple: true,
            parallelUploads: 100,
            maxFiles: 100,
            acceptedFiles: "image/*,.pdf,.doc,.docx,.xlsx,.xls",
            async: true,

            init: function () {


                this.on("sending", function (file, xhr, formData) {
                    formData.append("DirectoryName", $("#FileDirectory").val());


                });

                //var submitButton = document.querySelector("input[name ='Command']");
                var wrapperThis = this;
                wrapperThis.processQueue();
                $("#dropzoneJsForm").submit();

                //submitButton.addEventListener("click", function (event) {
                //    $(".overlay").show();
                //    event.preventDefault(event);
                //    wrapperThis.processQueue();

                //    setTimeout(function () {
                //        $("#dropzoneJsForm").submit();
                //    }, 6000);


                //    return false;
                //});


                this.on("addedfile", function (file) {

                    document.getElementById("btnStatusUpdate").disabled = true;
                    // Create the remove button
                    var removeButton = Dropzone.createElement("<button class='btn btn-lg dark'>Remove File</button>");

                    // Listen to the click event
                    removeButton.addEventListener("click", function (e) {
                        // Make sure the button click doesn't submit the form:
                        //e.defaultPrevented();
                        //e.stopPropagation();

                        // Remove the file preview.
                        wrapperThis.removeFile(file);
                        // If you want to the delete the file on the server as well,
                        // you can do the AJAX request here.
                    });

                    // Add the button to the file preview element.
                    file.previewElement.appendChild(removeButton);
                });

                //this.on('sendingmultiple', function (data, xhr, formData) {
                //    formData.append("TravelRequestID", $("#TravelRequestID").val());
                //});
                this.on("success", function (file, response) {

                    // or however you would point to your assigned file ID here;
                    //alert(JSON.stringify(response));
                    document.getElementById("FileDirectory").value = JSON.stringify(response);
                    document.getElementById("btnStatusUpdate").disabled = false;
                    // console should show the ID you pointed to
                    // do stuff with file.id ...
                });
            }

        };

    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.nav-tabs > li > a').click(function (event) {
                event.preventDefault();//stop browser to take action for clicked anchor

                //get displaying tab content jQuery selector
                var active_tab_selector = $('.nav-tabs > li.active > a').attr('href');

                //find actived navigation and remove 'active' css
                var actived_nav = $('.nav-tabs > li.active');
                actived_nav.removeClass('active');

                //add 'active' css into clicked navigation
                $(this).parents('li').addClass('active');

                //hide displaying tab content
                $(active_tab_selector).removeClass('active');
                $(active_tab_selector).addClass('hide');

                //show target tab content
                var target_tab_selector = $(this).attr('href');
                $(target_tab_selector).removeClass('hide');
                $(target_tab_selector).addClass('active');

            });
        });
    </script>
    <style>
        /** Start: to style navigation tab **/
        .nav {
            margin-bottom: 18px;
            margin-left: 0;
            list-style: none;
        }

            .nav > li > a {
                display: block;
            }

        .nav-tabs {
            *zoom: 1;
        }

            .nav-tabs:before,
            .nav-tabs:after {
                display: table;
                content: "";
            }

            .nav-tabs:after {
                clear: both;
            }

            .nav-tabs > li {
                float: left;
            }

                .nav-tabs > li > a {
                    padding-right: 12px;
                    padding-left: 12px;
                    margin-right: 2px;
                    line-height: 14px;
                }

        .nav-tabs {
            border-bottom: 1px solid #ddd;
        }

            .nav-tabs > li {
                margin-bottom: -1px;
            }

                .nav-tabs > li > a {
                    padding-top: 8px;
                    padding-bottom: 8px;
                    line-height: 18px;
                    border: 1px solid transparent;
                    -webkit-border-radius: 4px 4px 0 0;
                    -moz-border-radius: 4px 4px 0 0;
                    border-radius: 4px 4px 0 0;
                }

                    .nav-tabs > li > a:hover {
                        border-color: #eeeeee #eeeeee #dddddd;
                    }

            .nav-tabs > .active > a,
            .nav-tabs > .active > a:hover {
                color: #555555;
                cursor: default;
                background-color: #ffffff;
                border: 1px solid #ddd;
                border-bottom-color: transparent;
            }

        li {
            line-height: 18px;
        }

        .tab-content.active {
            display: block;
        }

        .tab-content.hide {
            display: none;
        }


        /** End: to style navigation tab **/

        .ui-timepicker-container {
            z-index: 3500 !important;
        }
    </style>


</body>
</html>

